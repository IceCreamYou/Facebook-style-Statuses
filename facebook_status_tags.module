<?php
// $Id$

/**
 * @file
 *   Converts @usernames to themed usernames and #hashtags to themed taxonomy terms on Facebook-style Statuses.
 */

/**
 * In this file:
 * - "Tag" means a reference, like @username or #hashtag.
 * - "Term" means a taxonomy term.
 */

//=============
//DRUPAL HOOKS.
//=============

/**
 * Implementation of hook_help().
 */
function facebook_status_tags_help($path, $arg) {
  if ($path == 'admin/help#facebook_status_tags') {
    return t('Modifies Facebook-style Statuses on display to replace @username references with the themed username and #hashtags with taxonomy terms. ') .
      t('Please see the <a href="http://drupal.org/project/facebook_status" rel="nofollow">Facebook-style Statuses project page</a> for more information.');
  }
}

/**
 * Implementation of hook_block().
 */
function facebook_status_tags_block($op = 'list', $delta = 0, $edit = NULL) {
  if ($op == 'list') {
    $block['facebook_status_popular_tags']['info'] = t('Facebook-style Statuses Popular Tags');
    return $block;
  }
  elseif ($op == 'view' && $delta == 'facebook_status_popular_tags') {
    $block['subject'] = t('Popular tags');
    $block['content'] = theme('facebook_status_popular_tags');
    return $block;
  }
  elseif ($op == 'configure' && $delta == 'facebook_status_popular_tags') {
    $form['facebook_status'] = array(
      '#type' => 'fieldset',
      '#title' => t('Facebook-style Statuses Settings'),
      '#collapsible' => TRUE,
      '#weight' => -4,
      '#tree' => TRUE,
    );
    $form['facebook_status']['facebook_status_tags_count'] = array(
      '#type' => 'textfield',
      '#title' => t('Number of items to display'),
      '#default_value' => variable_get('facebook_status_tags_count', 5),
      '#element_validate' => array('facebook_status_tags_block_validate'),
      '#size' => 3,
      '#maxlength' => 3,
    );
    $options = drupal_map_assoc(array('day', 'week', 'month', 'year', 'all'));
    $form['facebook_status']['facebook_status_tags_time'] = array(
      '#type' => 'select',
      '#title' => t('Length of time'),
      '#description' => t('Only consider statuses submitted within this time period while looking for popular tags.'),
      '#default_value' => variable_get('facebook_status_tags_time', 'all'),
      '#options' => $options,
    );
    return $form;
  }
  elseif ($op == 'save' && $delta == 'facebook_status_popular_tags') {
    variable_set('facebook_status_tags_count', $edit['facebook_status']['facebook_status_tags_count']);
    variable_set('facebook_status_tags_time', $edit['facebook_status']['facebook_status_tags_time']);
  }
}

/**
 * The validate function for the settings on the block form.
 */
function facebook_status_tags_block_validate($form, &$form_state) {
  $count = $form_state['values']['facebook_status']['facebook_status_tags_count'];
  if (!is_numeric($count) || $count != round($count) || $count < 1) {
    form_set_error('facebook_status][facebook_status_tags_count', t('The number of items to display must be a positive integer.'));
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function facebook_status_tags_form_facebook_status_admin_advanced_alter(&$form, &$form_state) {
  if (module_exists('taxonomy')) {
    $options = array('-1' => t('None'));
    $vocabularies = taxonomy_get_vocabularies();
    foreach ($vocabularies as $vocabulary) {
      $options[$vocabulary->vid] = check_plain($vocabulary->name);
    }
    $form['facebook_status_tags_vid'] = array(
      '#type' => 'select',
      '#title' => t('Vocabulary for #hashtags'),
      '#default_value' => variable_get('facebook_status_tags_vid', -1),
      '#options' => $options,
      '#weight' => -1,
    );
    $form['facebook_status_tags_url'] = array(
      '#type' => 'textfield',
      '#title' => t('Location of status-term pages'),
      '#description' => t('Can be an absolute or relative URL. Use the tokens [term-id] and [term-name]. Use Views to build the listing (a default one is provided).'),
      '#default_value' => variable_get('facebook_status_tags_url', 'statuses/term/[term-name]'),
      '#weight' => -1,
    );
    return $form;
  }
}

/**
 * Implementation of hook_theme().
 */
function facebook_status_tags_theme($existing, $type, $theme, $path) {
  return array(
    'facebook_status_popular_tags' => array(
      'arguments' => array(
        'count' => NULL,
        'time' => NULL,
      ),
    ),
  );
}

/**
 * Themes a list of popular statuses.
 *
 * @param $count
 *   The number of tags to show.
 * @param $time
 *   Statuses within this amount of time will be considered when searching for
 *   popular tags. Can be one of 'day,' 'week,' 'month,' 'year,' 'all.'
 * @return
 *   An HTML representation of a list of tags.
 */
function theme_facebook_status_popular_tags($count = NULL, $time = NULL) {
  if (!$count) {
    $count = variable_get('facebook_status_tags_count', 5);
  }
  if (!$time) {
    $time = variable_get('facebook_status_tags_time', 'all');
  }
  $terms = facebook_status_tags_popular_terms($count, $time);
  $items = array();
  foreach ($terms as $term) {
    $term_link = l($term->name, 'statuses/term/'. check_plain($term->name));
    $items[] = t('!term (@count)', array('!term' => $term_link, '@count' => $term->popularity));
  }
  return theme('item_list', $items);
}

//====
//API.
//====

/**
 * Gets statuses that have a given tag by tag name.
 *
 * @param $tag
 *   The taxonomy term or username which retrieved statuses must contain, or the
 *   ID of that term or user. If an ID is passed, it must be an integer (not a
 *   string numeral).
 * @param $type
 *   The type of tag: 'user' or 'term.'
 * @param $count
 *   The number of statuses to retrieve, starting with the most recent one. If
 *   zero, all relevant statuses are returned.
 * @param $uid
 *   If zero, has no effect. If a positive integer, restricts results to
 *   statuses on the profile of the user with that UID. If an array of positive
 *   integers, restricts results to statuses on the profile of users with a UID
 *   in the array.
 * @param $pid
 *   If zero, has no effect. If a positive integer, restricts results to
 *   statuses posted by the user with that UID. If an array of positive
 *   integers, restricts results to statuses posted by users with a UID in the
 *   array.
 * @return
 *   An array of status objects.
 */
function facebook_status_tags_get_statuses($tag, $type = 'term', $count = 1, $uid = 0, $pid = 0) {
  $params = array($tag, $type);
  if (is_int($tag)) {
    $rid = 'rid = %d';
  }
  elseif (is_string($tag)) {
    $rid = "name = '%s'";
  }
  $sql = "SELECT fbst.sid FROM {facebook_status_tags} fbst INNER JOIN {facebook_status} fb ON fbst.sid = fb.sid WHERE fbst.". $rid ." AND fbst.type = '%s' AND (";
  if ($uid == 0 && $pid == 0) {
    $sql = "SELECT sid FROM {facebook_status_tags} WHERE ". $rid ." AND type = '%s'";
  }
  elseif ($uid == 0) {
    if (is_numeric($pid)) {
      $pid = array($pid);
    }
    $params = array_merge($params, $pid);
    $sql .= implode(' OR ', array_fill(0, count($pid), 'fb.pid = %d'));
    $sql .= ')';
  }
  elseif ($pid == 0) {
    if (is_numeric($uid)) {
      $uid = array($uid);
    }
    $params = array_merge($params, $uid);
    $sql .= implode(' OR ', array_fill(0, count($uid), 'fb.uid = %d'));
    $sql .= ')';
  }
  else {
    if (is_numeric($uid)) {
      $uid = array($uid);
    }
    if (is_numeric($pid)) {
      $pid = array($pid);
    }
    $params = array_merge($params, $uid);
    $params = array_merge($params, $pid);
    $sql .= implode(' OR ', array_fill(0, count($uid), 'fb.uid = %d'));
    $sql .= ') AND (';
    $sql .= implode(' OR ', array_fill(0, count($pid), 'fb.pid = %d'));
    $sql .= ')';
  }

  if ($count) {
    $result = db_query_range($sql, $params, 0, $count);
  }
  else {
    $result = db_query($sql, $params);
  }
  $statuses = array();
  while ($sid = db_fetch_object($result)) {
    $statuses[] = facebook_status_load($sid->sid);
  }
  return $statuses;
}

/**
 * Determines whether a given status has a given reference.
 *
 * @param $sid
 *   The Status ID of the status being tested.
 * @param $rid
 *   The Term ID or User ID of the reference being tested.
 * @param $type
 *   The type of reference: 'user' or 'term.'
 * @return
 *   1 if the status has the reference or 0 if it does not.
 */
function facebook_status_tags_status_has_tag($sid, $rid, $type = 'term') {
  return db_result(db_query("SELECT COUNT(*) FROM {facebook_status_tags} WHERE sid = %d AND rid = %d AND type = '%s'", $sid, $rid, $type));
}

/**
 * Gets the tags that a given status has.
 *
 * @param $sid
 *   The Status ID of the status for which to retrieve a tag.
 * @param $type
 *   The type of reference: 'user' or 'term.'
 * @return
 *   An array of term objects or user objects.
 */
function facebook_status_tags_get_status_tags($sid, $type = 'term') {
  $result = db_query("SELECT rid FROM {facebook_status_tags} WHERE sid = %d AND type = '%s'", $sid, $type);
  $rids = array();
  while ($rid = db_fetch_object($result)) {
    if ($type == 'term') {
      $rids[] = taxonomy_get_term($rid->rid);
    }
    elseif ($type == 'user') {
      $rids[] = user_load(array('uid' => $rid->rid));
    }
  }
  return $rids;
}

/**
 * Get tags by popularity.
 *
 * @param $count
 *   The number of tags to return.
 * @param $time
 *   The time period in which to test for term popularity. Values can be "all,"
 *   "day," "week," "month," or "year."
 * @param $own
 *   If TRUE, only statuses posted on users' own profiles are counted. If FALSE,
 *   all statuses are counted.
 * @return
 *   An array of term objects, with the most popular first, and with the
 *   property "popularity" added.
 */
function facebook_status_tags_popular_terms($count = 1, $time = 'all', $own = FALSE) {
  $restrict = '';
  if ($time == 'all') {
    if ($own == TRUE) {
      $restrict = 'uid = pid AND ';
    }
    $result = db_query_range("SELECT COUNT(sid) count, rid FROM {facebook_status_tags} WHERE ". $restrict ."type = 'term' GROUP BY rid ORDER BY count DESC, sid DESC", 0, $count);
  }
  elseif (in_array($time, array('day', 'week', 'month', 'year'))) {
    $times = array(
      'day' => time() - (60 * 60 * 24),
      'week' => time() - (60 * 60 * 24 * 7),
      'month' => time() - (60 * 60 * 24 * 30),
      'year' => time() - (60 * 60 * 24 * 364),
    );
    $time = $times[$time];
    if ($own == TRUE) {
      $restrict = 'f.uid = f.pid AND ';
    }
    $result = db_query_range("SELECT COUNT(t.sid) count, t.rid FROM {facebook_status_tags} t INNER JOIN {facebook_status} f ON t.sid = f.sid
      WHERE ". $restrict ."t.type = 'term' AND f.status_time > %d GROUP BY t.rid ORDER BY count DESC", $time, 0, $count);
  }
  $terms = array();
  while ($obj = db_fetch_object($result)) {
    $term = taxonomy_get_term($obj->rid);
    $term->popularity = $obj->count;
    $terms[] = $term;
  }
  return $terms;
}

//=================
//HELPER FUNCTIONS.
//=================

/**
 * Replaces tags with a themed version.
 *
 * Tags can be in the following formats:
 *   - #hashtag
 *   - @userreference
 *   - [#tag with word-break characters]
 *
 * @param $subject
 *   The text in which to replace tags.
 * @param $new
 *   If TRUE, this function just finds tags. Otherwise, it finds and replaces
 *   them.
 * @return
 *   If $new is FALSE, returns the filtered text. If $new is TRUE, returns a
 *   nested array of tags. The outer array is keyed by type ('@' and '#').
 */
function _facebook_status_tags_filter($subject, $new = FALSE) {
  $pattern = '%(\A(#|@)(\w|(\p{L}\p{M}?)|-)+\b)|((?<=\s)(#|@)(\w|(\p{L}\p{M}?)|-)+\b)|(\[(#|@).+?\])%u';

  preg_match_all($pattern, $subject, $matches);
  $words = $matches[0];
  //Order the results by descending length so that "#the #therapy" matches
  //"#the" and "#therapy" instead of "#the" twice and "#therapy" never.
  uasort($words, '_facebook_status_tags_sort');
  $search = array();
  $replace = array();
  $items = array('@' => array(), '#' => array());
  foreach ($words as $word) {
    $sb = FALSE;
    if (strpos($word, '[') === 0) {
      $word = drupal_substr($word, 1, -1);
      $sb = TRUE;
    }
    $op = drupal_substr($word, 0, 1);
    $match = trim(drupal_substr($word, 1));
    if (($op == '@' || $op == '#') && $match) {
      if ($op == '@') {
        $account = user_load(array('name' => $match));
        if ($account->uid) {
          $link = $op . theme('username', $account);
          $items['@'][] = $account;
        }
      }
      elseif (variable_get('facebook_status_tags_vid', -1) != -1) {
        $term = _facebook_status_tags_get_term($match);
        //If the term does not exist, create it.
        if (empty($term)) {
          $term = array(
            'vid' => variable_get('facebook_status_tags_vid', -1),
            'name' => $match,
          );
          taxonomy_save_term($term);
        }
        $dest = _facebook_status_tags_resolve($term);
        $link = $op . l($term->name, $dest);
        $items['#'][] = $term;
      }
      if ($link) {
        if ($sb) {
          $word = '['. $word .']';
        }
        $search[] = $word;
        $replace[] = $link;
      }
    }
  }
  if (!$new) {
    return str_replace($search, $replace, $subject);
  }
  return $items;
}

/**
 * Provides a utility for sorting tags.
 *
 * @param $a1
 *   The first tag to compare.
 * @param $a2
 *   The second tag to compare.
 * @return
 *   Zero if the tags are the same length, one if the first is longer, or
 *   negative-one if the second is longer. The result is that longer strings
 *   float up and shorter strings sink.
 */
function _facebook_status_tags_sort($a1, $a2) {
  $len1 = drupal_strlen($a1);
  $len2 = drupal_strlen($a2);
  if ($len1 == $len2) {
    return 0;
  }
  return ($len1 > $len2) ? -1 : 1;
}

/**
 * Resolves the URL to which to redirect a taxonomy term.
 *
 * @param $term
 *   A taxonomy term object.
 * @return
 *   The resolved URL.
 */
function _facebook_status_tags_resolve($term) {
  $url = variable_get('facebook_status_tags_url', 'statuses/term/[term-name]');
  if (!trim($url)) {
    return;
  }
  $phpversion = drupal_substr(phpversion(), 0, 1);
  //str_ireplace() is not defined in PHP4 so we use the case-sensitive version.
  if ($phpversion == 5) {
    return str_ireplace(array('[term-id]', '[term-name]'), array($term->tid, $term->name), $url);
  }
  else {
    return str_replace(array('[term-id]', '[term-name]'), array($term->tid, $term->name), $url);
  }
}

/**
 * Gets a taxonomy term by name.
 */
function _facebook_status_tags_get_term($name) {
  return db_fetch_object(db_query("SELECT tid, name FROM {term_data} WHERE LOWER(name) = LOWER('%s') AND vid = %d", $name, variable_get('facebook_status_tags_vid', -1)));
}

//=================
//FBSS INTEGRATION.
//=================

/**
 * Implementation of hook_facebook_status_render_alter().
 */
function facebook_status_tags_facebook_status_render_alter(&$status_text, $owner, $poster, $status) {
  //$status_text comes in pre-encoded. Temporarily replace the single-quote
  //character encoding so it doesn't get unintentionally linkified.
  $status_text = str_replace("'", '&#039;', _facebook_status_tags_filter(str_replace('&#039;', "'", $status_text)));
}

/**
 * Implementation of hook_facebook_status_save().
 */
function facebook_status_tags_facebook_status_save($account, $status, $sid, $edit = FALSE) {
  //If the status was just edited, the tags could have changed, so we flush them.
  if ($edit) {
    db_query("DELETE FROM {facebook_status_tags} WHERE sid = %d", $sid);
  }
  $matches = _facebook_status_tags_filter($status, TRUE);
  //Users.
  $old_matches = array();
  foreach ($matches['@'] as $account) {
    if (!in_array($account->uid, $old_matches)) {
      $array = array(
        'sid' => $sid,
        'rid' => $account->uid,
        'type' => 'user',
        'name' => $account->name,
      );
      drupal_write_record('facebook_status_tags', $array);
      $old_matches[] = $account->uid;
    }
  }
  
  //Terms.
  if (!module_exists('taxonomy') || variable_get('facebook_status_tags_vid', -1) == -1) {
    return;
  }
  $old_matches = array();
  foreach ($matches['#'] as $term) {
    $term = (object) $term;
    if (!in_array($term->tid, $old_matches)) {
      $array = array(
        'sid' => $sid,
        'rid' => $term->tid,
        'type' => 'term',
        'name' => $term->name,
      );
      drupal_write_record('facebook_status_tags', $array);
      $old_matches[] = $term->tid;
    }
  }
}

/**
 * Implementation of hook_facebook_status_delete().
 */
function facebook_status_tags_facebook_status_delete($sid) {
  db_query("DELETE FROM {facebook_status_tags} WHERE sid = %d", $sid);
}

//===================
//OTHER INTEGRATIONS.
//===================

/**
 * Implementation of hook_views_api().
 */
function facebook_status_tags_views_api() {
  return array('api' => 2);
}

/**
 * Implementation of hook_taxonomy().
 */
function facebook_status_tags_taxonomy($op, $type, $array = NULL) {
  if ($op != 'delete') {
    return;
  }
  if ($type == 'term') {
    db_query("DELETE FROM {facebook_status_tags} WHERE rid = %d AND type = 'term'", $array['tid']);
  }
  elseif ($type == 'vocabulary') {
    if ($array['vid'] === variable_get('facebook_status_tags_vid', -1)) {
      //If the vocabulary is deleted, all the tags will no longer exist, so the references are invalid.
      db_query("DELETE FROM {facebook_status_tags} WHERE type = 'term'");
      variable_set('facebook_status_tags_vid', -1);
    }
  }
}

/**
 * Implementation of hook_user().
 */
function facebook_status_tags_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'delete') {
    db_query("DELETE FROM {facebook_status_tags} WHERE rid = %d and type = 'user'", $account->uid);
  }
}