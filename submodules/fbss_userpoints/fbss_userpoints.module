<?php
// $Id$

/**
 * @file
 *   Integrates Userpoints with Facebook-style Statuses.
 * @todo
 *   Not updated for 3.x.
 */

/**
 * Implementation of hook_userpoints().
 */
function fbss_userpoints_userpoints($op, $params = array()) {
  if ($op == 'setting') {
    $form['facebook_status'] = array(
      '#type' => 'fieldset',
      '#title' => t('Facebook-style Statuses'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['facebook_status']['facebook_status_userpoints_own'] = array(
      '#type' => 'textfield',
      '#title' => t("Userpoints for changing one's own status"),
      '#default_value' => variable_get('facebook_status_userpoints_own', 0),
    );
    $form['facebook_status']['facebook_status_userpoints_other'] = array(
      '#type' => 'textfield',
      '#title' => t("Userpoints for posting a message on another user's profile"),
      '#default_value' => variable_get('facebook_status_userpoints_other', 0),
    );
    $form['facebook_status']['facebook_status_userpoints_max'] = array(
      '#type' => 'textfield',
      '#title' => t('Maximum number of Userpoints from posting statuses per day'),
      '#description' => t('Set to zero for no limit.') .' '.
        t('Note that the actual number of points awarded per day could be higher than this if this value is not a multiple of the points given above.'),
      '#default_value' => variable_get('facebook_status_userpoints_max', 5),
    );
    $form['#validate'][] = '_fbss_userpoints_validate';
    return $form;
  }
}

/**
 * Validate function for the Userpoints settings.
 */
function _fbss_userpoints_validate($form, &$form_state) {
  $v = $form_state['values'];
  if (!is_numeric($v['facebook_status_userpoints_own']) || $v['facebook_status_userpoints_own'] < 0) {
    form_set_error('facebook_status_userpoints_own', t("Userpoints for changing one's own status must be a non-negative integer."));
  }
  if (!is_numeric($v['facebook_status_userpoints_other']) || $v['facebook_status_userpoints_other'] < 0) {
    form_set_error('facebook_status_userpoints_other', t("Userpoints for posting a message on another user's profile must be a non-negative integer."));
  }
  if (!is_numeric($v['facebook_status_userpoints_max']) || $v['facebook_status_userpoints_max'] < 0) {
    form_set_error('facebook_status_userpoints_max', t('The maximum number of Userpoints from posting statuses per day must be a non-negative integer.'));
  }
}

/**
 * Implementation of hook_facebook_status_save().
 */
function fbss_userpoints_facebook_status_save($status, $context, $edit) {
  $points_today = db_result(db_query("SELECT SUM(points) FROM {userpoints_txn}
    WHERE uid = %d AND time_stamp > %d
      AND (operation = 'facebook_status add own' OR operation = 'facebook_status add other')
      AND expired = 0 AND status = 0",
    $poster->uid, time() - 86400));
  if (variable_get('facebook_status_userpoints_max', 5) && $points_today > variable_get('facebook_status_userpoints_max', 5)) {
    return;
  }
  $params = array(
    'uid' => $poster->uid,
    'reference' => $sid,
    //Unknown purpose.
    //'entity_id' => $sid,
    //'entity_type' => 'facebook_status',
  );
  if ($poster->uid == $owner->uid) {
    $params['description'] = t('!user posted a new status.', array('!user' => theme('username', $poster)));
    $params['points'] = variable_get('facebook_status_userpoints_own', 0);
    $params['operation'] = 'facebook_status add own';
  }
  elseif ($poster->uid != $owner->uid) {
    $params['description'] = t('!poster wrote a message to !owner', array('!poster' => theme('username', $poster), '!owner' => theme('username', $owner)));
    $params['points'] = variable_get('facebook_status_userpoints_other', 0);
    $params['operation'] = 'facebook_status add other';
  }
  userpoints_userpointsapi($params);
}
 
/**
 * Implementation of hook_facebook_status_delete().
 */
function fbss_userpoints_facebook_status_delete($sid) {
  $status = facebook_status_load($sid);
  $poster = user_load(array('uid' => $status->pid));
  global $user;
  $result = db_fetch_object(db_query("SELECT points FROM {userpoints_txn} WHERE operation LIKE 'facebook_status add%%' AND reference = %d AND uid = %d", $sid, $poster->uid));
  $params = array(
    'uid' => $poster->uid,
    'points' => 0 - $result->points,
    'operation' => 'facebook_status delete',
  );
  if ($user->uid == $poster->uid) {
    $params['description'] = t('!user deleted a status message.', array('!user' => theme('username', $user)));
  }
  elseif ($user->uid != $poster->uid) {
    $params['description'] = t('!user deleted a message by !poster',
      array('!user' => theme('username', $user), '!poster' => theme('username', $poster)));
  }
  userpoints_userpointsapi($params);
}
