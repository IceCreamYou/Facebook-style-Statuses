<?php
// $Id$

/**
 * @file
 * Facebook-style statuses gives each user a status that they can update and others can view.
 *
 * The module provides a number of blocks and integration with other modules to maximize usability.
 * In addition, several convenient hooks are provided to facilitate custom blocks.
 */

/**
 * Implementation of hook_help().
 */
function facebook_status_help($path='', $arg) {

  $output = '';

  switch ($path) {
    case "admin/help#facebook_status":
      $output = '<p>'. t("This module adds a Facebook-style status block.  Please see <a href=\"http://drupal.org/project/facebook_status\" title=\"http://drupal.org/project/facebook_status\" rel=\"nofollow\">http://drupal.org/project/facebook_status</a> for more information.") .'</p>';
      break;
  }

  return $output;
}

/**
 * Implementation of hook_form_alter().
 */
function facebook_status_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'block_admin_configure' && arg(4) == 'facebook_status' && (arg(5) == '3' || arg(5) == '4')) {
    $form['facebook_status'] = array(
      '#type' => 'fieldset',
      '#title' => t('Facebook Status Settings'),
      '#collapsible' => TRUE,
      '#weight' => -4,
      '#tree' => TRUE,
    );
  }
  if ($form_id == 'block_admin_configure' && arg(4) == 'facebook_status' && arg(5) == '3') {
    $form['facebook_status']['facebook_status_special_user'] = array(
      '#type' => 'textfield',
      '#title' => t('User ID of the user whose statuses you want to display in this block'),
      '#default_value' => variable_get('facebook_status_special_user', 1),
      '#size' => 12,
      '#maxlength' => 11,
      '#description' => t("This block will work exactly like the Facebook Status block, except that it only shows one user's status.  That user is determined by the UID you enter in this field."),
      '#element_validate' => array('facebook_status_alter_validate'),
    );
  }
  if ($form_id == 'block_admin_configure' && arg(4) == 'facebook_status' && arg(5) == '4') {
    $fbsur_result = db_query("SELECT plural_name, rtid FROM {user_relationship_types}");
    while ($row = db_fetch_array($fbsur_result)) {
      $i = $row['rtid'];
      $fbsur[$i] = $row['plural_name'];
    }
    $form['fbs_misc']['facebook_status_ur_type'] = array(
      '#type' => 'select',
      '#title' => t('User Relationship type to use for this block'),
      '#default_value' => variable_get('facebook_status_ur_type', 1),
      '#description' => t("This block works exactly like the Facebook Status Recent Updates block except that it only shows the latest status updates for users with whom the currently logged in user has a relationship."),
      '#options' => $fbsur,
    );
  }
}

/**
 * Implementation of hook_validate().
 *
 * @see facebook_status_form_alter()
 */
function facebook_status_alter_validate($form, &$form_state) {
  if ( !is_numeric($form_state['values']['facebook_status']['facebook_status_special_user']) || $form_state['values']['facebook_status']['facebook_status_special_user'] <= 0 ) {
    form_set_error('', t('Please enter a single User ID in the Facebook Status UID field.  The UID of the user you enter will be used to determine which user to use for this block.'));
  }
  else if ( !db_result(db_query("SELECT created FROM {users} WHERE uid = %d", $form_state['values']['facebook_status']['facebook_status_special_user'])) ) {
    form_set_error('', t('The value you have entered in the Facebook Status UID field is not a valid User ID.  The UID is the number that appears in the URL on profile pages after "/user/".'));
  }
}

/**
 * Implementation of hook_perm().
 */
function facebook_status_perm() {
  //Note that, since all this module does is provide a block, there is no need for an 'access facebook_status' permission because access can be set in the block's settings.
  return array('edit own facebook_status', 'edit all facebook_status');
}

/**
 * Implementation of hook_block().
 */
function facebook_status_block($op='list', $delta=0) {
  if ($op == "list") {
    $block[0]["info"] = t("Facebook Status");
    $block[1]["info"] = t("Facebook Status Recent Updates");
    $block[2]["info"] = t("Facebook Status User Update History");
    $block[3]["info"] = t("Facebook Status Individual User");
    if (module_exists('user_relationships')) {
      $block[4]["info"] = t("Facebook Status UR Recent Updates");
    }
    return $block;
  }
  else if ($op == 'view') {
    global $user;
    switch ($delta) {
    case 0:
    case 3:
      $x = FALSE;
      //Get the information before we decide whether to show the update form so we can check to make sure we don't show the form to people it shouldn't be shown to.
      //It doesn't matter whether the user is allowed to have a status because if the user isn't allowed, the status just won't show up (we address this later on).
      if (arg(0) == 'user' && is_numeric(arg(1))) {
        $uname = db_result(db_query("SELECT name FROM {users} WHERE uid = %d", arg(1)));
        //htmlspecialchars instead of the usual check_plain because names sometimes have quotes in them.
        $fbs_name = htmlspecialchars($uname, ENT_NOQUOTES);
        $fbs_uid = arg(1);
        $sm = db_fetch_array(db_query_range("SELECT status_fb, status_time FROM {facebook_status} WHERE uid = %d ORDER BY sid DESC", arg(1), 0, 1));
      }
      else if (arg(0) == 'node' && is_numeric(arg(1))) {
        $fbs_user = db_fetch_array(db_query("SELECT u.uid, u.name FROM {users} u LEFT JOIN {node} n ON u.uid = n.uid WHERE u.uid = n.uid AND n.nid = %d", arg(1)));
        $fbs_name = htmlspecialchars($fbs_user['name'], ENT_NOQUOTES);
        $fbs_uid = $fbs_user['uid'];
        $sm = db_fetch_array(db_query_range("SELECT status_fb, status_time FROM {facebook_status} WHERE uid = %d ORDER BY sid DESC", $fbs_uid, 0, 1));
      }
      else {
        $fbs_name = htmlspecialchars($user->name, ENT_NOQUOTES);
        $fbs_uid = $user->uid;
        $sm = db_fetch_array(db_query_range("SELECT status_fb, status_time FROM {facebook_status} WHERE uid = %d ORDER BY sid DESC", $user->uid, 0, 1));
      }
      $block_content = '<div class="facebook_status_block">';
      //This gigantic 'if' statement decides whether we can show the update form or not.  And if we don't show the form, we don't need the AJAX.
      if ( (((arg(0) == 'user' && is_numeric(arg(1)) && arg(1) == $user->uid)
        || (arg(0) == 'node' && is_numeric(arg(1)) && db_result(db_query("SELECT uid FROM {node} WHERE nid = %d", arg(1))) == $user->uid)
        || (arg(0) != 'user' && arg(0) != 'node' && !is_numeric(arg(1))))
        && user_access('edit own facebook_status')
        && !in_array($user->uid, variable_get('facebook_status_clear_user', array(0))))
        || (user_access('edit all facebook_status')
        && !in_array($fbs_uid, variable_get('facebook_status_clear_user', array(0)))) ) {
        $block_content .= '<div class="facebook_status_form">'. facebook_status_form_display() .'</div>';
        $x = TRUE;
        $path = drupal_get_path('module', 'facebook_status');
        if (variable_get('facebook_status_ajax', 1)) {
          drupal_add_js($path .'/facebook_status.js');
        }
      }
      //On the block that shows only the "special user" status, assign the special user using the value set on the block configuration form (see facebook_status_form_alter).
      //We're just going to assume that this user isn't on the list of users who aren't allowed to have statuses.  If this user is on that list, we'll set the updated time to now and the status to an error.
      if ($delta == 3) {
        $fbs_uid = variable_get('facebook_status_special_user', 1);
        $uname = db_result(db_query("SELECT name FROM {users} WHERE uid = %d", $fbs_uid));
        $fbs_name = htmlspecialchars($uname, ENT_NOQUOTES);
          if (in_array($fbs_uid, variable_get('facebook_status_clear_user', array(0)))) {
            $sm['status_fb'] = t("Error: this user is not allowed to have a status.");
            if (user_access('access administration pages')) {
              $sm['status_fb'] .= l(t('  Change this'), 'admin/settings/facebook_status');
            }
            $sm['status_time'] = time();
          }
          else {
            $sm = db_fetch_array(db_query_range("SELECT status_fb, status_time FROM {facebook_status} WHERE uid = %d ORDER BY sid DESC", $fbs_uid, 0, 1));
          }
      }
      $block_content .= '<div class="facebook_status_status">';
      if ($x) {
        //If the form is going to show up (i.e. if a user can edit their status) then apply 'a' formatting to the status so it looks clickable so users are aware that the form will appear using AJAX.
        $block_content .= '<a class="facebook_status_ajax_clickable_text">';
      }
      if ($sm['status_time'] && !in_array($fbs_uid, variable_get('facebook_status_clear_user', array(0)))) {
        if (variable_get('facebook_status_mode', 1)) {
          //If the status is not edit-able, make the user's name a link to that user's profile.
          if ($x || (arg(0) == 'user' && is_numeric(arg(1)))) {
            $block_content .= $fbs_name ." ";
          }
          else {
            $block_content .= l($fbs_name, "user/". $fbs_uid) ." ";
          }
        }
        if (time() - $sm['status_time'] < 60) {
          $time = t("a moment");
        }
        else {
          $time = format_interval(time() - $sm['status_time'], 1);
        }
        $block_content .= htmlspecialchars($sm['status_fb'], ENT_NOQUOTES) ." <span class='". t("submitted") ."'>". $time . t(' ago') ."</span>";
      }
      //If the user is not allowed to have a status.
      else if (in_array($fbs_uid, variable_get('facebook_status_clear_user', array(0)))) {
        //If the status form is not the user's own, use different strings than if it is the user's own.
        if ( $fbs_uid != $user->uid ) {
          $block_content .= t('@username is not allowed to have a status.', array('@username' => $fbs_name));
        }
        else {
          $block_content .= t('You are not allowed to have a status.');
        }
                if (user_access('access administration pages')) {
                  $sm['status_fb'] .= l(t('  Change this'), 'admin/settings/facebook_status');
            }
          }
      //If the user has not posted a status.
      else {
        //If the status form is not the user's own, use different strings than if it is the user's own.
        if ( $fbs_uid != $user->uid ) {
          $block_content .= t('@username does not yet have a status', array('@username' => $fbs_name));
        }
        else {
          $block_content .= t('You do not yet have a status');
        }
      }
      if ($x) {
        $block_content .= '</a>';
      }
      $block_content .= '</div></div>';
      $block['subject'] = 'Status';
      $block['content'] = $block_content;
      break;
    case 1:
      $x = -1;
    case 2:
      //If we're displaying the User Update History block, we need to send the right UID to facebook_status_get_status instead of -1 which gets all users.
      if ($delta == 2) {
        if ( arg(0) == 'user' && is_numeric(arg(1)) ) {
          $x = arg(1);
        }
        else if ( arg(0) == 'node' && is_numeric(arg(1)) ) {
          $x = db_result(db_query("SELECT uid FROM {node} WHERE nid = %d", arg(1)));
        }
        else {
          $x = $user->uid;
        }
      }
      if (!in_array($x, variable_get('facebook_status_clear_user', array(0)))) {
        $c_array = facebook_status_get_status($x, variable_get('facebook_status_max_num_block_stats_all', 5));
        $block_content = "<div class='facebook_status_block_all'><ul>";
        foreach ($c_array as $row) {
          if (time() - $row['status_time'] < 60) {
            $time = t("a moment");
          }
          else {
            $time = format_interval(time() - $row['status_time'], 1);
          }
          $block_content .= "<li>". l(htmlspecialchars($row['fbs_name'], ENT_NOQUOTES), "user/". $row['fbs_uid']) . t(" ") . htmlspecialchars($row['status_fb'], ENT_NOQUOTES) ." <div class='". t("submitted") ."'>". $time . t(' ago') ."</div></li>";
        }
        $block_content .= "</ul></div>";
      }
      $block['subject'] = "Recent Status Updates";
      $block['content'] = $block_content;
      break;
    case 4:
      //This module_exists() may not be necessary because $block[4]["info"] is also wrapped in module_exists().
      if (module_exists('user_relationships')) {
        $subject = db_result(db_query("SELECT plural_name FROM {user_relationship_types} WHERE rtid = %d", variable_get('facebook_status_ur_type', 1)));
        $block['subject'] = $subject . t("' Recent Status Updates");
        $block['content'] = facebook_status_get_ur_status();
      }
      break;
    }
    return $block;
  }

}

/**
 * FAPI definition for the status update form.
 *
 * facebook_status_form_display() renders the form via drupal_get_form().
 *
 * @ingroup forms
 * @see facebook_status_update_form_submit()
 * @see facebook_status_update_form_validate()
 */
function facebook_status_update_form() {
  global $user;
  if (variable_get('facebook_status_mode', 1)) {
    if (arg(0) == 'user' && is_numeric(arg(1))) {
      $uname = db_result(db_query("SELECT name FROM {users} WHERE uid = %d", arg(1)));
      $xname = htmlspecialchars($uname, ENT_NOQUOTES);
    }
    else if (arg(0) == 'node' && is_numeric(arg(1))) {
      $uuser = db_fetch_array(db_query("SELECT u.uid, u.name FROM {users} u LEFT JOIN {node} n ON n.uid = u.uid WHERE n.uid = u.uid AND n.nid = %d", arg(1)));
      $uname = $uuser['name'];
      $uuid = $uuser['uid'];
      $xname = htmlspecialchars($uname, ENT_NOQUOTES);
      if (user_access('edit all facebook_status') && $uuid != $user->uid) {
        $xname = l($xname, "user/". $uuid);
      }
    }
    else {
      $xname = htmlspecialchars($user->name, ENT_NOQUOTES);
    }
    //This needs to be done here instead of in the actual #title so it can be turned off if Facebook Mode is off.
    $xname = ": " . $xname;
  }
  else {
    $xname = '';
  }
  $status = facebook_status_get_status();
  //Warning: the status column in the {facebook_status} table only holds 255 bytes.
  //In strict SQL mode, statuses larger than this will not be saved; in other modes, they will be truncated.
  //This is relevant for the #maxlength attribute; do not set a #maxlength larger than the column can hold.
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t("Status") . $xname,
    '#size' => variable_get('facebook_status_field_length', 30),
    '#maxlength' => variable_get('facebook_status_length', 192),
    '#description' => t("Please enter your status.  Remember that it will not update unless you click 'Save.'"),
    '#default_value' => ((!empty( $status[0]['status_fb'] ) ) ? htmlspecialchars($status[0]['status_fb'], ENT_NOQUOTES) : t("is ")),
  );
  $form['submit'] = array('#type' => 'submit', '#value' => t("Save") );
  return $form;
}

/**
 * Renders themed HTML for the status update form.
 */
function facebook_status_form_display() {
  return drupal_get_form('facebook_status_update_form');
}

/**
 * FAPI submit function for facebook_status_update_form().
 * Implementation of hook_submit().
 *
 * There are separate sections for the different permission types because it's easier to read and runs a little faster
 * than if only the 'edit all' section was used and permissions were checked each time before setting $uid.
 * The result is that the code is slightly longer and so more is loaded on bootstrap.
 * This is all technically unnecessary in terms of this module because the form doesn't render if it can't be used,
 * but it saves a lot of work for anyone who decides to render the form arbitrarily.
 *
 * Indentation is slightly irregular because permission checking was added after most of the code was written.
 *
 * @see facebook_status_update_form()
 * @see facebook_status_update_form_validate()
 */
function facebook_status_update_form_submit($form, &$form_state) {
  global $user;
      //Note that this first part is only for people who can edit their own status, so we don't need to check whose database records to update.
      if ( user_access('edit own facebook_status') && !user_access('edit all facebook_status') ) {
  if ( db_query("INSERT INTO {facebook_status} (status_fb, status_time, uid) VALUES('%s', %d, %d)", $form_state['values']['name'], time(), $user->uid) ) {
    drupal_set_message(t('Your status has been updated.'));
  }
  else {
    drupal_set_message(t('An error has occurred while updating your status.  Please try again.  If the problem persists, please contact an administrator.'), 'error');
  }
      }
      else if (user_access('edit all facebook_status')) {
  //Determine the uid of the user whose status will be updated.
  if ( arg(0) == 'user' && is_numeric(arg(1)) ) {
    $uid = arg(1);
  }
  else if ( arg(0) == 'node' && is_numeric(arg(1)) ) {
    $uid = db_result(db_query("SELECT uid FROM {node} WHERE nid = %d", arg(1)));
  }
  else {
    $uid = $user->uid;
  }
  if ( db_query("INSERT INTO {facebook_status} (status_fb, status_time, uid) VALUES('%s', %d, %d)", $form_state['values']['name'], time(), $uid) ) {
    drupal_set_message(t('The status has been updated.'));
  }
  else {
    drupal_set_message(t('An error has occurred while updating the status.  Please try again.'), 'error');
  }
      }
      //This technically shouldn't happen, but we need a catch in case someone without permission manages to submit the form.
      else {
        drupal_set_message(t('An error has occurred while updating the status: you do not have permission to perform this action.  Please contact an administrator.'), 'error');
      }
}

/**
 * FAPI validate function for facebook_status_update_form().
 * Implementation of hook_validate().
 *
 * There are separate sections for the different permission types because it's easier to read and runs a little faster
 * than if only the 'edit all' section was used and permissions were checked each time before setting $uid.
 * The result is that the code is slightly longer and so more is loaded on bootstrap.
 * This is all technically unnecessary in terms of this module because the form doesn't render if it can't be used,
 * but it saves a lot of work for anyone who decides to render the form arbitrarily.
 *
 * @see facebook_status_update_form()
 * @see facebook_status_update_form_submit()
 */
function facebook_status_update_form_validate($form, &$form_state) {
  global $user;
  if ( user_access('edit own facebook_status') && !user_access('edit all facebook_status') ) {
    if ($form_state['values']['name'] == '' || $form_state['values']['name'] == ' ') {
      $last_status = db_result(db_query_range("SELECT status_fb FROM {facebook_status} WHERE uid = %d ORDER BY sid DESC", $user->uid, 0, 1));
      if ( $last_status ) {
        $form_state['values']['name'] = $last_status;
      }
      else {
        form_set_error('', t('You must enter a status in order to save it.'));
      }
    }
  }
  //The only difference in this section is that $uid is used instead of $user->uid.
  else if (user_access('edit all facebook_status')) {
    if ($form_state['values']['name'] == '' || $form_state['values']['name'] == ' ') {
      if ( arg(0) == 'user' && is_numeric(arg(1)) ) {
        $uid = arg(1);
      }
      else if ( arg(0) == 'node' && is_numeric(arg(1)) ) {
        $uid = db_result(db_query("SELECT uid FROM {node} WHERE nid = %d", arg(1)));
      }
      else {
        $uid = $user->uid;
      }
      $last_status = db_result(db_query_range("SELECT status_fb FROM {facebook_status} WHERE uid = %d ORDER BY sid DESC", $uid, 0, 1));
      if ( $last_status ) {
        $form_state['values']['name'] = $last_status;
      }
      else {
        form_set_error('', t('You must enter a status in order to save it.'));
      }
    }
  }
}

/**
 * Gets user statuses.
 *
 * Warning: the status is not escaped, so developers still need to do validation to make sure there are no XSS attacks.
 *
 * @param $fbs_uid
 *   Can be either a numeric value or an array.
 *   If it is a numeric value, the following applies:
 *     $fbs_uid is the UID for the user whose status(es) should be returned.
 *     If -1, the latest status updates for all users are returned, but only one status update is returned per user.
 *     If less than -1, all the latest status updates (for any user) are returned.
 *   If it is an array, $fbs_uid is an array of UIDs for users whose status(es) should be returned.
 *   If $fbs_uid is not passed it is treated as a single numeric value.  That value is assigned as follows:
 *     If the current page is a user profile, then we use the uid of the user whose profile is being viewed.
 *     If the current page is a node, then we use the uid of the author of that node.
 *     If the current page is neither a node nor a user profile, we use the current user's uid.
 * @param $num_results
 *   The number of results to return for the relevant user(s).
 *   If zero, all results are returned.
 *   If $fbs_uid is an array and $num_results is negative, only one result will be returned for each user specified, and no more than -($num_results) will be returned in total.
 * @return
 *   An array of arrays.  Each sub-array contains the status, status-posted-time, uid, and username of the user whose uid is passed to the function as $fbs_uid.
 *   Keys of the sub-arrays are status_fb, status_time, fbs_uid, and fbs_name, respectively.  The username is useful for extra theming and/or linking.
 *   The top-level array holds all the sub-arrays: effectively, it is a list of different status updates.
 */
function facebook_status_get_status($fbs_uid = 0, $num_results = 1) {
  //There are easier ways to do the basic procedures when $fbs_uid is an array, but they don't allow the same flexibility.
  //This method can be slow on large sites, so developers may want to write custom queries if this becomes a problem.
  //For example PHP that should help you build your custom page or block, visit http://www.icecreamyou.com/fbs_example.txt
  //Note that the example assumes that $fbs_uid is an array containing UIDs.
  if (is_array($fbs_uid)) {
    $fbs_uid = $fbsu_array;
    foreach ($fbsu_array as $fbs_uid) {
      if (!in_array($fbs_uid, variable_get('facebook_status_clear_user', array(0)))) {
        if ( is_numeric($num_results) && $num_results < 0 ) {
          $query = db_query_range("SELECT sid, status_fb, status_time FROM {facebook_status} WHERE uid = %d ORDER BY sid DESC", $fbs_uid, 0, 1);
        }
        else {
          $query = db_query("SELECT sid, status_fb, status_time FROM {facebook_status} WHERE uid = %d ORDER BY sid DESC", $fbs_uid);
        }
        $result = array();
        while ($row = db_fetch_array($query)) {
          $x = $row['sid'];
            //We can afford to break the loop because results should be ordered by sid, which is effectively the same as ordering by status_time.
            //This means that either we've run into blank statuses or there weren't any statuses to begin with.
            //And that means that empty($result[$x])  will return TRUE.
            if (!$row['status_time']) {
              break;
            }
          $result[$x] = $row;
          //Adding the name to the array is a convenience, but don't forget to add a space between it and the status.
          $result[$x]['fbs_name'] = db_result(db_query("SELECT name FROM {users} WHERE uid = %d", $fbs_uid));
          $result[$x]['fbs_uid'] = $fbs_uid;
        }
      }
    }
    if (empty($result)) {
      return FALSE;
    }
    $result = krsort($result);
    //Resets the keys.
    $i = 0;
    foreach ($result as $value) {
      //Removes items from the array where the user is not allowed to have a status (in case the user added statuses before she was disallowed from doing so).
      if (!in_array($value['fbs_uid'], variable_get('facebook_status_clear_user', array(0)))) {
        $output[$i] = $value;
        $i++;
      }
    }
    if (empty($output)) {
      return FALSE;
    }
    //Limits the number of results to $num_results.
    if (is_numeric($num_results) && $num_results < 0) {
      $num_results = -$num_results;
    }
    if (is_numeric($num_results) && $num_results > 0) {
      $i = 0;
      $final = array();
      //Lower the number of results to return if there aren't that many results so we don't end up with blank results.
      if ($num_results > count($output) ) {
        $num_results = count($output);
      }
      while ($i < $num_results) {
        $final[$i] = $output[$i];
        $i++;
      }
    }
    else {
      $final = $output;
    }
    return $final;
  }

  //Note that we don't need an else {} structure here because the function is exited once something is returned.  This section is for numeric values of $fbs_uid.
  $result = array();
  if ( !$fbs_uid || !is_numeric($fbs_uid) ) {
    if ( arg(0) == 'user' && is_numeric(arg(1)) ) {
      $fbs_uid = arg(1);
    }
    else if ( arg(0) == 'node' && is_numeric(arg(1)) ) {
      $fbs_uid = db_result(db_query("SELECT uid FROM {node} WHERE nid = %d", arg(1)));
    }
    else {
      global $user;
      $fbs_uid = $user->uid;
    }
  }
  if ($fbs_uid < -1) {
    $duid = "";
  }
  else {
    $duid = "GROUP BY fbs_uid";
  }
  //$query is for displaying results for only one user, $query_2 is for displaying results for multiple users.  In $query_2, $duid controls grouping.
  if ( !is_numeric($num_results) ) {
    $num_results = 1;
    $query = db_query_range("SELECT status_fb, status_time FROM {facebook_status} WHERE uid = %d ORDER BY sid DESC", $fbs_uid, 0, 1);
    $query_2 = db_query_range("SELECT * FROM (SELECT uid as fbs_uid, status_fb, status_time, sid FROM {facebook_status} ORDER BY sid DESC) as x %s ORDER BY sid DESC", $duid, 0, 1);
  }
  else if (is_numeric($num_results) && $num_results == 0) {
    $query = db_query("SELECT status_fb, status_time FROM {facebook_status} WHERE uid = %d ORDER BY sid DESC", $fbs_uid);
    $query_2 = db_query("SELECT * FROM (SELECT uid as fbs_uid, status_fb, status_time, sid FROM {facebook_status} ORDER BY sid DESC) as x %s ORDER BY sid DESC", $duid);
  }
  else {
    //$num_results can only be negative if $fbs_uid is an array.
    if ($num_results < 0) {
      $num_results = -$num_results;
    }
    $query = db_query_range("SELECT status_fb, status_time FROM {facebook_status} WHERE uid = %d ORDER BY sid DESC", $fbs_uid, 0, $num_results);
    $query_2 = db_query_range("SELECT * FROM (SELECT uid as fbs_uid, status_fb, status_time, sid FROM {facebook_status} ORDER BY sid DESC) as x %s ORDER BY sid DESC", $duid, 0, $num_results);
  }
  if ( $fbs_uid > 0 && !in_array($fbs_uid, variable_get('facebook_status_clear_user', array(0))) ) {
    $result = array();
    $i = 0;
    while ($row = db_fetch_array($query)) {
      $result[$i] = $row;
      //Adding the name to the array is a convenience, but don't forget to add a space between it and the status.
      $result[$i]['fbs_name'] = db_result(db_query("SELECT name FROM {users} WHERE uid = %d", $fbs_uid));
      $result[$i]['fbs_uid'] = $fbs_uid;
      $i++;
    }
  }
  else if ( $fbs_uid < 0 ) {
    $result = array();
    $i = 0;
    while ($row = db_fetch_array($query_2)) {
      if (!in_array($row['fbs_uid'], variable_get('facebook_status_clear_user', array(0)))) {
        if (drupal_strlen($row['status_fb']) > variable_get('facebook_status_max_block_len_all', variable_get('facebook_status_length', 192))) {
          $row['status_fb'] = drupal_substr($row['status_fb'], 0, variable_get('facebook_status_max_block_len_all', variable_get('facebook_status_length', 192)));
          //There are a couple of ways this method could be improved, but in a lot of fonts '...' is shorter than &hellip; and since the purpose of this is to shorten the string it's an arbitrary choice.
          if ( drupal_strlen($row['status_fb']) == variable_get('facebook_status_max_block_len_all', variable_get('facebook_status_length', 192)) ) {
            $row['status_fb'] .= "...";
          }
        }
        $result[$i] = $row;
        //Adding the name to the array is a convenience, but don't forget to add a space between it and the status.
        $result[$i]['fbs_name'] = db_result(db_query("SELECT name FROM {users} WHERE uid = %d", $result[$i]['fbs_uid']));
        $i++;
      }
    }
  }
  else {
    if ($fbs_uid == 0) {
      $fbs_name = t("Anonymous");
    }
    else {
      $fbs_name = db_result(db_query("SELECT name FROM {users} WHERE uid = %d", $fbs_uid));
    }
    $result = array();
    $result[0] = array(
      'status_fb' => t("Error: this user is not allowed to have a status."),
      'status_time' => 0,
      'fbs_name' => $fbs_name,
      'fbs_uid' => $fbs_uid,
    );
  }
  return $result;
}

/**
 * FAPI function for the administrative settings page.
 *
 * @ingroup forms
 * @see facebook_status_admin_validate()
 * @see facebook_status_admin_submit()
 */
function facebook_status_admin() {

  $form['fbs_general'] = array(
    '#type' => 'fieldset',
    '#title' => t('General settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE, 
    '#weight' => -3,
    '#tree' => TRUE,
  );
  $form['fbs_general']['facebook_status_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Facebook Mode'),
    '#default_value' => variable_get('facebook_status_mode', 1),
    '#description' => t("Facebook Mode makes this module work like Facebook, where the user's username is appended to the front of the status.  Default is On."),
  );
  $form['fbs_general']['facebook_status_ajax'] = array(
    '#type' => 'checkbox',
    '#title' => t('Slide Effect'),
    '#default_value' => variable_get('facebook_status_ajax', 1),
    '#description' => t("With this enabled, users who have permission to edit statuses can click on the status to see the edit box drop down.  This minimizes the space that Facebook Status takes up.  Default is On."),
  );

  $form['fbs_lengths'] = array(
    '#type' => 'fieldset',
    '#title' => t('Status length'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE, 
    '#weight' => -2,
    '#tree' => TRUE,
  );
  $form['fbs_lengths']['facebook_status_field_length'] = array(
    '#type' => 'textfield',
    '#title' => t('Length of the Status textfield'),
    '#default_value' => variable_get('facebook_status_field_length', 30),
    '#size' => 3,
    '#maxlength' => 3,
    '#description' => t("30 is standard length for a sidebar block (and the default); 72 is standard for most content and footer blocks.")
  );
  $form['fbs_lengths']['facebook_status_length'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum length of a status'),
    '#default_value' => variable_get('facebook_status_length', 192),
    '#size' => 3,
    '#maxlength' => 3,
    '#description' => t("192 is the default; 255 is the maximum; no higher than 240 is recommended.  No statuses may be longer than this.")
  );
  $form['fbs_lengths']['facebook_status_max_block_len_all'] = array(
    '#type' => 'textfield',
    '#title' => t('Shorten statuses in the Facebook Status Recent Updates block to this length'),
    '#default_value' => variable_get('facebook_status_max_block_len_all', variable_get('facebook_status_length', 192)),
    '#size' => 3,
    '#maxlength' => 3,
    '#description' => t("The maximum status length (above) is the default and maximum; 25 is the minimum.  You may want to lower this if you have more than one status showing on the block.")
  );
  if (module_exists('user_relationships')) {
    $form['fbs_lengths']['facebook_status_max_block_len'] = array(
      '#type' => 'textfield',
      '#title' => t('Shorten statuses in the Facebook Status UR Recent Updates to this length'),
      '#default_value' => variable_get('facebook_status_max_block_len', variable_get('facebook_status_length', 192)),
      '#size' => 3,
      '#maxlength' => 3,
      '#description' => t("The maximum status length (above) is the default and maximum; 25 is the minimum.  You may want to lower this if you have more than one status showing on the block.")
    );
  }

  $form['fbs_number'] = array(
    '#type' => 'fieldset',
    '#title' => t('Number of statuses'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE, 
    '#weight' => -1,
    '#tree' => TRUE,
  );
  $form['fbs_number']['facebook_status_max_num_block_stats_all'] = array(
    '#type' => 'textfield',
    '#title' => t('The maximum number of statuses to show in the Facebook Status Recent Updates block'),
    '#default_value' => variable_get('facebook_status_max_num_block_stats_all', 5),
    '#size' => 3,
    '#maxlength' => 3,
    '#description' => t("5 is the default, 1 is the minimum.")
  );
  if (module_exists('user_relationships')) {
    $form['fbs_number']['facebook_status_max_num_block_stats'] = array(
      '#type' => 'textfield',
      '#title' => t('The maximum number of statuses to show in the Facebook Status UR Recent Updates block'),
      '#default_value' => variable_get('facebook_status_max_num_block_stats', 5),
      '#size' => 3,
      '#maxlength' => 3,
      '#description' => t("5 is the default, 1 is the minimum.")
    );
  }

  $form['fbs_misc'] = array(
    '#type' => 'fieldset',
    '#title' => t('Miscellaneous'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE, 
    '#weight' => 0,
    '#tree' => TRUE,
  );
  $form['fbs_misc']['facebook_status_clear_user_records_string'] = array(
    '#type' => 'textfield',
    '#title' => t('Remove all statuses for these users'),
    '#default_value' => variable_get('facebook_status_clear_user_records_string', implode(',', variable_get('facebook_status_clear_user_records', array(0)))),
    '#size' => 72,
    '#maxlength' => 255,
    '#description' => t("Use zero for none.  Separate each UID with a comma: 1,2,3")
  );
  $form['fbs_misc']['facebook_status_clear_user_string'] = array(
    '#type' => 'textfield',
    '#title' => t('Specify the UIDs of users who are not allowed to have statuses'),
    '#default_value' => variable_get('facebook_status_clear_user_string', implode(',', variable_get('facebook_status_clear_user', array(0)))),
    '#size' => 72,
    '#maxlength' => 255,
    '#description' => t("Use zero for none.  Separate each UID with a comma: 1,2,3")
  );
  variable_set('facebook_status_clear_all', 'none');
  $form['fbs_misc']['facebook_status_clear_all'] = array(
    '#type' => 'select',
    '#title' => t('Delete'),
    '#default_value' => variable_get('facebook_status_clear_all', 'none'),
    '#description' => t("Deletes status updates from the database.  CANNOT BE UNDONE."),
    '#options' => array(
      'none' => 'Nothing',
      'all' => 'All status updates',
      'old' => 'All but the latest status update for each user',
    ),
  );

  //Normally this is unnecessary, but for unknown reasons the form suddenly decided not to recognize the _submit function, so we specify it directly.
  $form['#submit'][] = 'facebook_status_admin_submit';
  return system_settings_form($form);
}

/**
 * FAPI validate function for facebook_status_admin().
 * Implementation of hook_validate().
 *
 * @see facebook_status_admin()
 * @see facebook_status_admin_submit()
 */
function facebook_status_admin_validate($form, &$form_state) {
  if (!(is_numeric($form_state['values']['fbs_lengths']['facebook_status_field_length']) && $form_state['values']['fbs_lengths']['facebook_status_field_length'] <= variable_get('facebook_status_length', 192) && $form_state['values']['fbs_lengths']['facebook_status_field_length'] > 1)) {
    form_set_error('', t('Please enter a number between 1 and the maximum status length, inclusive, for the length of the status textfield.'));
  }
  if (!(is_numeric($form_state['values']['fbs_lengths']['facebook_status_length']) && $form_state['values']['fbs_lengths']['facebook_status_length'] <= 255 && $form_state['values']['fbs_lengths']['facebook_status_length'] > 1)) {
    form_set_error('', t('Please enter a number between 1 and 255, inclusive, for the maximum status length.'));
  }
  if (!(is_numeric($form_state['values']['fbs_lengths']['facebook_status_max_block_len_all']) && $form_state['values']['fbs_lengths']['facebook_status_max_block_len_all'] >= 25)) {
    form_set_error('', t('Please enter a number between 25 and the maximum status length, inclusive, for the maximum length of statuses in the Facebook Status Recent Updates block.'));
  }
  if (module_exists('user_relationships')) {
    if (!(is_numeric($form_state['values']['fbs_lengths']['facebook_status_max_block_len']) && $form_state['values']['fbs_lengths']['facebook_status_max_block_len'] >= 25)) {
      form_set_error('', t('Please enter a number between 25 and the maximum status length, inclusive, for the maximum length of statuses in the Facebook Status UR Recent Updates block.'));
    }
  }
  if (!(is_numeric($form_state['values']['fbs_number']['facebook_status_max_num_block_stats_all']) && $form_state['values']['fbs_number']['facebook_status_max_num_block_stats_all'] >= 1)) {
    form_set_error('', t('Please enter a number above zero for the maximum number of statuses to show in the Facebook Status Recent Updates block.'));
  }
  if (module_exists('user_relationships')) {
    if (!(is_numeric($form_state['values']['fbs_number']['facebook_status_max_num_block_stats']) && $form_state['values']['fbs_number']['facebook_status_max_num_block_stats'] >= 1)) {
      form_set_error('', t('Please enter a number above or equal to 1 for the maximum number of statuses to show in the Facebook Status UR Recent Updates block.'));
    }
  }
  $temp = explode(',', variable_get('facebook_status_clear_user_string', implode(',', variable_get('facebook_status_clear_user', array(0)))));
  foreach ($temp as $value) {
    $is_user = FALSE;
    if ( $value > 0 && is_numeric($value) ) {
      $is_user = $value;
    }
    if (!($is_user || $value == 0)) {
      form_set_error('', t('Each value you enter in the disallowed users box must be a User ID, and each UID must be serparated by nothing more than a comma.  The UID is the number that shows up in the URL after "[domain]/user/" on profile pages.'));
    }
  }
  $temp = explode(',', variable_get('facebook_status_clear_user_records_string', implode(',', variable_get('facebook_status_clear_user_records', array(0)))));
  foreach ($temp as $value) {
    $is_user = FALSE;
    if ( $value > 0 && is_numeric($value) ) {
      $is_user = $value;
    }
    if (!($is_user || $value == 0)) {
      form_set_error('', t('Each value you enter in the clear-user-statuses box must be a User ID, and each UID must be serparated by nothing more than a comma.  The UID is the number that shows up in the URL after "[domain]/user/" on profile pages.'));
    }
  }
}

/**
 * FAPI submit function for facebook_status_admin().
 * Implementation of hook_submit().
 *
 * @see facebook_status_admin()
 * @see facebook_status_admin_validate()
 */
function facebook_status_admin_submit($form, &$form_state) {
  variable_set('facebook_status_clear_user', explode(',', variable_get('facebook_status_clear_user_string', '0')));
  if ($form_state['values']['fbs_misc']['facebook_status_clear_all'] == 'all') {
    db_query("TRUNCATE TABLE {facebook_status}");
    drupal_set_message(t('All statuses cleared.'));
  }
  //Deletes all statuses except the most current one for each user.
  else if ($form_state['values']['fbs_misc']['facebook_status_clear_all'] == 'old') {
    //We go through this extra process because a query can't select from a table that it's also deleting from.  Otherwise, we could use "sid NOT IN [subquery]."
    $temp = db_query("SELECT MAX(sid) as sid FROM {facebook_status} GROUP BY uid");
    $nsids = '';
    while ($value = db_fetch_array($temp)) {
      $nsids .= " AND sid != ". $value['sid'];
    }
    //Removes first " AND ".
    $nsids = drupal_substr($nsids, 5);
    db_query("DELETE FROM {facebook_status} WHERE %s ORDER BY sid ASC", $nsids);
    drupal_set_message(t('All statuses except the most recent one were cleared for each user.'));
  }
  variable_set('facebook_status_clear_user_records', explode(',', variable_get('facebook_status_clear_user_records_string', '0')));
  $temp = variable_get('facebook_status_clear_user_records', explode(',', variable_get('facebook_status_clear_user_records_string', '0')));
  foreach ($temp as $value) {
    if ($value != 0) {
      db_query("DELETE FROM {facebook_status} WHERE uid = %d", $value);
      $name = db_result(db_query("SELECT name FROM {users} WHERE uid = %d", $value));
      $message = t('All statuses were cleared for ') . $name;
      drupal_set_message($message);
    }
  }

  //Sets variables because the form refuses to do it for us! >:(
  $values = array();
  $values['fbs_general'] = $form_values['fbs_general'];
  $values['fbs_lengths'] = $form_values['fbs_lengths'];
  $values['fbs_number'] = $form_values['fbs_number'];
  $values['fbs_misc'] = $form_values['fbs_misc'];
  foreach ($values as $key => $value) {
    variable_set($key, $value);
  }
  variable_del('facebook_status_clear_user_records_string');
  variable_del('facebook_status_clear_user_records');
}

/**
 * Implementation of hook_menu().
 */
function facebook_status_menu() {

  $items = array();

  $items['admin/settings/facebook_status'] = array(
    'title' => 'Facebook Status settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('facebook_status_admin'),
    'access arguments' => array('access administration pages'),
    'description' => 'Allows administrators to adjust certain display settings for Facebook Status.',
  );

  return $items;
}

/**
 * Gets the latest status updates from users with whom the current user has a relationship and themes them in a list.
 *
 * @param $ur_rtid
 *   The relationship type ID (rtid) to use when determining which users the current user relates to.
 *   If a rtid is not passed, this function uses the default relationship specified on the Facebook Status settings page.
 * @param $number
 *   The number of statuses returned.
 *   If not passed, defaults to the setting from the Facebook Status settings page.
 * @param $grouping
 *   If TRUE, only one status update is returned per user.
 *   If FALSE, all available updates are returned per user.
 * @return
 *   Themed HTML listing status updates from users with whom the current user has a relationship, or
 *   FALSE if there are no relationship types yet.
 */
function facebook_status_get_ur_status($ur_rtid = -1, $number = 0, $grouping = TRUE) {
  if ($grouping) {
    $group_by = "GROUP BY (name)";
  }
  else {
    //So that we don't end up with duplicates, which is a result of the way UR is set up with both requester and requestee records.
    $group_by = "GROUP BY sid";
  }
  if (!is_numeric($number) || $number < 0) {
    $number = 0;
  }
  if (!$number) {
    $number = variable_get('facebook_status_max_num_block_stats', 5);
  }
  if ($ur_rtid = -1) {
    $ur_rtid = variable_get('facebook_status_ur_type', 1);
  }
  if (db_result(db_query("SELECT COUNT(*) FROM {user_relationship_types}"))) {
    global $user;
    //Dynamically build queries based on whether the relevant relationship type is one-way and/or requires approval.
    $ur_object = db_fetch_array(db_query("SELECT is_oneway, requires_approval FROM {user_relationship_types} WHERE rtid = %d", $ur_rtid));
    if ($ur_object['is_oneway'] == 1) {
      $ur_oneway_urjoin = "u.uid = ur.requester_id";
      $ur_oneway_fbjoin = "ur.requester_id = fb.uid";
      $ur_oneway_urwhere = "ur.requester_id = ". $user->uid;
    }
    else {
      $ur_oneway_urjoin = "(u.uid = ur.requester_id OR u.uid = ur.requestee_id)";
      $ur_oneway_fbjoin = "(ur.requester_id = fb.uid OR ur.requestee_id = fb.uid)";
      $ur_oneway_urwhere = "(ur.requester_id = ". $user->uid ." OR ur.requestee_id = ". $user->uid .")";
    }
    if ($ur_object['requires_approval'] = 1) {
      $ur_requires_approval = "AND (ur.approved = 1)";
    }
    else {
      $ur_requires_approval = "";
    }
    $disallow = "";
    foreach (variable_get('facebook_status_clear_user', array(0)) as $value) {
      $disallow .= " AND fb.uid != ". $value;
    }
    $user_rel = db_query("SELECT uid, name, status_fb, MAX(status_time) as status_time FROM (
    SELECT fb.uid, u.name, fb.status_fb, fb.status_time
    FROM {users} AS u
    LEFT JOIN {user_relationships} AS ur
      ON %s
    LEFT JOIN {facebook_status} AS fb
      ON %s
    WHERE %s
      AND %s
      %s
      AND (ur.rtid = %d)
      AND (u.uid = fb.uid)
      %s
    ORDER BY fb.sid DESC)
    as x
    %s
    ORDER BY status_time DESC
    ", $ur_oneway_urjoin, $ur_oneway_fbjoin, $ur_oneway_urjoin, $ur_oneway_urwhere, $ur_requires_approval, $ur_rtid, $disallow, $group_by);

    $output = '';
      $output .= "<div class='facebook_status_ur_block'><ul>";
      //Count by $i instead of using db_query_range() so we can exclude the current user and still end up with the right number of results.
      $i = 0;
      while ($row = db_fetch_array($user_rel)) {
        if ($row['uid'] != $user->uid) {
          $row['status_fb'] = drupal_substr($row['status_fb'], 0, variable_get('facebook_status_max_block_len', variable_get('facebook_status_length', 192)));
          if ( drupal_strlen($row['status_fb']) == variable_get('facebook_status_max_block_len', variable_get('facebook_status_length', 192)) ) {
            $row['status_fb'] .= "...";
          }
          $output .= "<li>". l(htmlspecialchars($row['name'], ENT_NOQUOTES), "user/". $row['uid']) . t(" ") . htmlspecialchars($row['status_fb'], ENT_NOQUOTES) ." <div class='" . t("submitted") ."'>". format_interval(time() - $row['status_time'], 1) . t(' ago') ."</div></li>";
          $i++;
          if ($i >= $number) {
            break;
          }
        }
      }
      $output .= "</ul></div>";
    //An awkward workaround because we don't have a good way to check to see if there are any results.
    if ($output != "<div class='facebook_status_ur_block'><ul></ul></div>") {
      return $output;
    }
    else {
      return '';
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Implementation of hook_user().
 */
function facebook_status_user($op, &$edit, &$account) {
  if ($op == 'delete') {
    //Remove abandoned statuses from the database on user account deletion.
    db_query('DELETE FROM {facebook_status} WHERE uid = %d', $account->uid);
  }
}
