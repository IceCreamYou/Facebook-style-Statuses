<?php
// $Id$

/**
 * @file
 *   Creates context-sensitive social streams.
 * @todo
 *   - Make sure values can be computed in facebook_status_token_values()
 *   - Write update path
 *   - Update CSS/JS if necessary
 *   - (Important) Update Views integration
 *   - Finish upgrading the other integrations that are now in submodules
 *   - Add a context configuration page that lets admin change the pages on
 *     which the context applies. Note that this also requires changing
 *     facebook_status_determine_context() to handle the case where no contexts
 *     apply.
 */

/**
 * The number of seconds within which a user can override a previously
 * submitted status update.
 */
define("FACEBOOK_STATUS_OVERRIDE_TIMER", 10);

//=============
//DRUPAL HOOKS.
//=============

/**
 * Implementation of hook_help().
 */
function facebook_status_help($path, $arg) {
  if ($path == 'admin/help#facebook_status') {
    return t('Creates social streams of "status updates" for users or other entities.') .' '.
      t('Please see the <a href="@project">Project page</a> or <a href="@docs">documentation</a> for more information.',
        array(
          '@project' => 'http://drupal.org/project/facebook_status',
          '@docs' => 'http://drupal.org/node/421128',
        )
      );
  }
}

/**
 * Implementation of hook_menu().
 */
function facebook_status_menu() {
  $items = array();
  $items['admin/settings/facebook_status'] = array(
    'title' => 'Facebook-style Statuses',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('facebook_status_admin'),
    'access arguments' => array('administer Facebook-style Statuses settings'),
    'description' => 'Allows administrators to adjust settings for Facebook-style Statuses.',
    'file' => 'includes/utility/facebook_status.admin.inc',
  );
  $items['admin/settings/facebook_status/basic'] = array(
    'title' => 'Basic',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer Facebook-style Statuses settings'),
    'weight' => -1,
  );
  $items['admin/settings/facebook_status/advanced'] = array(
    'title' => 'Advanced',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('facebook_status_admin_advanced'),
    'access arguments' => array('administer Facebook-style Statuses settings'),
    'description' => 'Allows administrators to adjust advanced settings for Facebook-style Statuses.',
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/utility/facebook_status.admin.inc',
  );
  $items['admin/settings/facebook_status/contexts'] = array(
    'title' => 'Contexts',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('facebook_status_admin_contexts'),
    'access arguments' => array('administer Facebook-style Statuses settings'),
    'description' => 'Allows administrators to adjust context stream settings for Facebook-style Statuses.',
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/utility/facebook_status.admin.inc',
  );
  $items['statuses/announce'] = array(
    'title' => 'Make an announcement',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('facebook_status_announce_admin'),
    'access arguments' => array('send messages to all users at once'),
    'description' => 'Allows administrators to send status updates to all users at once.',
    'file' => 'includes/utility/facebook_status.announce.inc',
  );
  $items['statuses/share'] = array(
    'title' => 'Update status',
    'page callback' => 'facebook_status_share_page',
    'access callback' => 'facebook_status_user_access',
    'access arguments' => array('add'),
    'description' => "The current user's social stream.",
    'type' => MENU_SUGGESTED_ITEM,
  );
  $items['statuses/conversation'] = array(
    'title' => 'Conversation',
    'page callback' => '_facebook_status_conversation',
    'access callback' => 'facebook_status_user_access',
    'access arguments' => array('converse'),
    'description' => 'Shows a conversation between users, with a form to contribute to it if applicable.',
    'type' => MENU_CALLBACK,
    'file' => 'includes/utility/facebook_status.conversation.inc',
  );
  $items['statuses/%facebook_status/edit'] = array(
    'title' => 'Edit status',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('facebook_status_edit', 1),
    'access callback' => 'facebook_status_user_access',
    'access arguments' => array('edit', 1),
    'type' => MENU_CALLBACK,
    'file' => 'includes/utility/facebook_status.edit.inc',
  );
  $items['statuses/%facebook_status/delete'] = array(
    'title' => 'Delete status',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_facebook_status_delete', 1),
    'access callback' => 'facebook_status_user_access',
    'access arguments' => array('delete', 1),
    'type' => MENU_CALLBACK,
    'file' => 'includes/utility/facebook_status.edit.inc',
  );
  $items['statuses/%facebook_status'] = array(
    'title' => 'Status',
    'page callback' => 'facebook_status_show',
    'page arguments' => array(1, array('page' => TRUE)),
    'access callback' => 'facebook_status_user_access',
    'access arguments' => array('view', 1),
    'type' => MENU_CALLBACK,
    'file' => 'includes/utility/facebook_status.status-page.inc',
  );
  $items['facebook_status/js'] = array(
    'title' => 'Save status update form',
    'page callback' => 'facebook_status_save_js',
    'access callback' => '_facebook_status_access_js',
    'access arguments' => FALSE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/utility/facebook_status.ahah.inc',
  );
  if (module_exists('devel_generate')) {
    $items['admin/generate/facebook_status'] = array(
      'title' => 'Generate statuses',
      'description' => 'Generate a given number of statuses. Optionally delete current items.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('facebook_status_generate_form'),
      'access callback' => '_facebook_status_generate_access',
      'file' => 'includes/utility/facebook_status.generate.inc',
    );
  }
  return $items;
}

/**
 * The page callback for the share-status page.
 */
function facebook_status_share_page() {
  $view = variable_get('facebook_status_share_view', 'facebook_status');
  return theme('facebook_status_form_display', $GLOBALS['user'], 'user', $view);
}

/**
 * Implementation of hook_block().
 */
function facebook_status_block($op = 'list', $delta = 0, $edit = NULL) {
  if ($op == 'list') {
    $block['facebook_status']['info'] = t('Facebook-style Statuses');
    $block['facebook_status']['visibility'] = 0;
    $block['facebook_status']['pages'] = 'statuses/share';
    return $block;
  }
  elseif ($op == 'view' && $delta == 'facebook_status') {
    $context = facebook_status_determine_context();
    $view = FALSE;
    if (!variable_get('facebook_status_block_view', 0) && !empty($context['view'])) {
      unset($context['view']);
    }
    $block['subject'] = t('Status');
    $block['content'] = theme('facebook_status_form_display', $context);
    return $block;
  }
  elseif ($op == 'configure' && $delta == 'facebook_status') {
    $form['facebook_status'] = array(
      '#type' => 'fieldset',
      '#title' => t('Facebook-style Statuses Settings'),
      '#collapsible' => TRUE,
      '#weight' => -4,
      '#tree' => TRUE,
    );
    $form['facebook_status']['facebook_status_block_view'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show a view on this block'),
      '#description' => t('If enabled, the view displayed is chosen automatically based on the setting for the relevant context.'),
      '#default_value' => variable_get('facebook_status_block_view', 0),
    );
    return $form;
  }
  elseif ($op == 'save' && $delta == 'facebook_status') {
    if (isset($edit['facebook_status'])) {
      variable_set('facebook_status_block_view', $edit['facebook_status']['facebook_status_block_view']);
    }
  }
}

/**
 * Implementation of hook_perm().
 */
function facebook_status_perm() {
  return array(
    'administer Facebook-style Statuses settings',
    'delete all statuses',
    'delete own statuses',
    'delete status messages on own profile',
    'delete status messages on own nodes',
    'edit all statuses',
    'edit own statuses',
    'post status messages to other streams',
    'send messages to all users at once',
    'update and view own stream',
    'view all statuses',
  );
}

/**
 * Implementation of hook_user().
 */
function facebook_status_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'delete') {
    //Remove abandoned statuses from the database on user account deletion.
    db_query("DELETE FROM {facebook_status} WHERE sender = %d OR (recipient = %d AND type = 'user')", $account->uid, $account->uid);
  }
  elseif ($op == 'view' && variable_get('facebook_status_profile', 1)) {
    $value = theme('facebook_status_form_display', $account, 'user');
    //Don't show this section if there's nothing there or the user doesn't have permission to see it.
    if (empty($value)) {
      return;
    }
    if (!isset($account->content['facebook_status'])) {
      $account->content['facebook_status'] = array();
    }
    $account->content['facebook_status'] += array(
      '#type' => 'user_profile_category',
      '#attributes' => array('class' => 'facebook_status-profile-category'),
      '#weight' => -5,
      '#title' => t('Messages'),
    );
    $account->content['facebook_status']['status'] = array(
      '#type' => 'user_profile_item',
      '#title' => '',
      '#value' => $value,
      '#attributes' => array('class' => 'facebook_status profile'),
    );
  }
}

/**
 * Implementation of hook_init().
 */
function facebook_status_init() {
  //Don't clear the default text on first focus if the default text was manually set in the URL.
  $undefault = isset($_GET['status-text']);
  if (is_numeric($_GET['sid'])) {
    $rs = facebook_status_load($_GET['sid']);
    $undefault = $undefault || ($rs->sender != $GLOBALS['user']->uid && $rs->message);
  }
  drupal_add_js(array('facebook_status' => array(
    'autofocus' => (
      (arg(0) == 'statuses' && arg(1) == 'share') ||
      (arg(0) == 'statuses' && is_numeric(arg(1)) && arg(2) == 'edit') ||
      (arg(0) == 'statuses' && arg(1) == 'conversation')
    ),
    'noautoclear' => (
      $undefault ||
      (arg(0) == 'statuses' && is_numeric(arg(1)) && arg(2) == 'edit')
    ),
    'maxlength' => variable_get('facebook_status_length', 140),
    'refreshLink' => (bool) variable_get('facebook_status_refresh', 0)
  ), 'setting');
}

/**
 * Implementation of hook_link().
 */
function facebook_status_link($type, $status) {
  if ($type != 'facebook_status') {
    return;
  }
  global $user;
  $links = array();
  if (facebook_status_user_access('edit', $status)) {
    $links['edit'] = array(
      'href' => 'statuses/'. $status->sid .'/edit',
      'title' => t('edit'),
      'attributes' => array('class' => 'facebook_status-edit-link facebook_status-action-link'),
    );
  }
  if (facebook_status_user_access('delete', $status)) {
    $links['delete'] = array(
      'href' => 'statuses/'. $status->sid .'/delete',
      'title' => t('delete'),
      'attributes' => array('class' => 'facebook_status-delete-link facebook_status-action-link'),
    );
  }
  //If not self update by current user (because if it is a self update by the current user, there is no need for a response)
  if ($status->type != 'user' || $status->recipient != $status->sender || $status->sender != $user->uid) {
    //If permission to respond
    if (facebook_status_user_access('add', facebook_status_user_load($status->sender), 'user', $user)) {
      //If to current user (not a self update)
      if ($status->type == 'user' && $status->recipient == $user->uid) {
        $title = t('reply');
      }
      //If self update (not by current user)
      elseif ($status->type == 'user' && $status->recipient == $status->sender) {
        $title = t('respond');
      }
      //If from one user to another and the current user is not the recipient
      elseif ($status->type == 'user') {
        $title = t('view conversation');
      }
      //If not to a user
      else {
        $title = t('discuss');
      }
      $links['respond'] = array(
        'href' => 'statuses/conversation/'. $status->sender .','. $user->uid,
        'title' => $title,
        'attributes' => array('class' => 'facebook_status-respond-link facebook_status-action-link'),
      );
    }
  }
  if (facebook_status_user_access('add', $user, 'user', $user)) {
    $links['share'] = array(
      'href' => 'statuses/share',
      'title' => t('share'),
      'query' => array('sid' => $status->mid, 'destination' => $_GET['q']),
      'attributes' => array('class' => 'facebook_status-share-link facebook_status-action-link'),
    );
  }
  return $links;
}

/**
 * Implementation of hook_theme().
 */
function facebook_status_theme($existing, $type, $theme, $path) {
  return array(
    'facebook_status_item' => array(
      'arguments' => array(
        'status' => NULL,
        'options' => array(),
      ),
      'template' => 'facebook-status-item',
      'file' => 'includes/facebook_status.preprocess.inc',
    ),
    'facebook_status_form_display' => array(
      'arguments' => array(
        'recipient' => NULL,
        'type' => 'user',
      ),
      'file' => 'includes/utility/facebook_status.form.inc',
    ),
    'facebook_status_time' => array(
      'arguments' => array(
        'time' => time(),
      ),
    ),
    'facebook_status_admin_contexts' => array(
      'arguments' => array(
        'form' => NULL,
      ),
      'file' => 'includes/utility/facebook_status.admin.inc',
    ),
  );
}

//================
//THEME FUNCTIONS.
//================

/**
 * Display a status message.
 * This is basically a wrapper for theme('facebook_status_item').
 *
 * @param $status
 *   A status object.
 * @param $options
 *   An associative array with the following optional properties:
 *   - links: Whether to show links with the status
 *   - page: Whether the status is being shown on a page by itself
 *   - cacheable: Whether the themed text will be stored
 * @return
 *   HTML representing a status.
 */
function facebook_status_show($status, $options = array()) {
  module_load_include('inc', 'facebook_status', 'includes/facebook_status.preprocess');
  return _facebook_status_show($status, $options);
}

/**
 * Returns a formatted string showing the time the status was submitted.
 *
 * @param $time
 *   The Unix timestamp for when the relevant status was updated.
 * @return
 *   If the status was submitted within the last 3 days, returns a "time ago"
 *   date. If not, returns a normal (small) date. If zero, returns FALSE.
 */
function theme_facebook_status_time($time) {
  if (!$time) {
    return FALSE;
  }
  if (time() - $time < 60) {
    return t('a moment ago');
  }
  elseif (time() - $time < 60 * 60 * 24 * 3) {
    return t('!time ago', array('!time' => format_interval(time() - $time, 1)));
  }
  else {
    return format_date($time, 'small');
  }
}

//==================================
//APPLICATION PROGRAMMING INTERFACE.
//==================================

/**
 * Checks that users have permission to perform various status-related tasks.
 * Use this function instead of the derivatives so that other modules can alter
 * the access rules.
 *
 * @param $op
 *   The name of the relevant task.
 * @param ...
 *   Relevant contextual information based on the task:
 *   - 'add':
 *     - $recipient: The object representing the recipient (defaults to the
 *       current user)
 *     - $type: The recipient type (defaults to 'user')
 *     - $sender: The user object representing the sender (defaults to the
 *       current user)
 *   - 'converse':
 *     - Automatically determines context from URL parameters. (Note that this
 *       permission checks for ability to view the conversation, not to
 *       participate in it.) This is basically a special-case for "view" for
 *       the "user" type.
 *   - 'delete', 'edit', 'view':
 *     - $status: The status being considered for deletion/editing/viewing
 *     - $account: The user object of the person taking the action (defaults to
 *       the current user)
 *   - 'view_stream':
 *     - $recipient: The owner of the stream being viewed
 *     - $account: The user object of the person taking the action (defaults to
 *       the current user)
 * @return
 *   TRUE if the user has permission to perform the task; FALSE otherwise.
 */
function facebook_status_user_access($op) {
  module_load_include('inc', 'facebook_status', 'includes/utility/facebook_status.access');
  $args = func_get_args();
  array_shift($args);
  $allow = call_user_func_array("facebook_status_user_access_$op", $args);
  drupal_alter('facebook_status_user_access', $allow, $op, $args);
  return $allow;
}

/**
 * Fetches status updates in reverse chronological order.
 * Assumes blank statuses shouldn't be returned.
 *
 * @param $senders
 *   A user ID of the sender of status updates, or an array of User IDs for
 *   users whose profile was posted on. If empty, all users are considered.
 * @param $recipients
 *   An array of User IDs for users who posted statuses. If empty,
 *   all users are considered.
 * @param $total
 *   The maximum number of statuses to return. If zero, all relevant statuses
 *   are returned.
 * @return
 *   An array of status objects.
 */
function facebook_status_get_statuses($senders = array(), $recipients = array(), $type = NULL, $total = 0) {
  $statuses = array();
  $args = array_merge(array($type), $senders, $recipients);
  $query = "SELECT * FROM {facebook_status} WHERE created <> 0 AND type = '%s'";
  if (!empty($senders)) {
    $query .= " AND sender IN (". db_placeholders($senders) .")";
  }
  if (!empty($recipients)) {
    $query .= " AND recipient IN (". db_placeholders($recipients) .")";
  }
  $query .= " ORDER BY created DESC, sid DESC";
  $result = ($total > 0 ? $fn($query, $args, 0, $total) : $fn($query, $args));
  while ($status = db_fetch_object($result)) {
    $statuses[] = $status;
  }
  return $statuses;
}

/**
 * Determines whether a recipient has statuses.
 *
 * @param $recipient_id
 *   The ID of the recipient whose number of statuses will be looked up.
 *   Defaults to the current user.
 * @param $type
 *   The stream type.
 * @param $sender_id
 *   The user ID of the sender. If not passed, all users are considered.
 * @return
 *   The number of statuses of the relevant recipient (by the relevant sender
 *   if specified).
 */
function facebook_status_has_status($recipient_id = NULL, $type = 'user', $sender_id = NULL) {
  global $user;
  $recipient_id = (empty($recipient_id) ? $user->uid : $recipient_id);
  if (!empty($sender_id)) {
    return db_result(db_query("SELECT COUNT(sid) FROM {facebook_status} WHERE type = '%s' AND recipient = %d AND sender = %d", $type, $recipient_id, $sender_id));
  }
  return db_result(db_query("SELECT COUNT(sid) FROM {facebook_status} WHERE type = '%s' AND recipient = %d", $type, $recipient_id));
}

/**
 * Loads a status object.
 *
 * @param $sid
 *   The Status ID.
 * @return
 *   A status object containing sid, sender, recipient, type, created, message.
 */
function facebook_status_load($sid) {
  return db_fetch_object(db_query("SELECT * FROM {facebook_status} WHERE sid = %d", $sid));
}

/**
 * Determines the current context to use when building the status update form.
 *
 * @param $type
 *   The type of context to return. If not specified, the context is
 *   automatically determined.
 * @return
 *   An associative array containing these elements:
 *   - title: The "friendly" name of the context.
 *   - description: An explanation of who owns the stream that the context
 *     defines.
 *   - handler: A context handler object. See facebook_status.contexts.inc to
 *     see the default context handlers and their properties.
 *   - weight: The precedence of the context type.
 *   - file: A file that will be included before any of the associated
 *     functions are run.
 */
function facebook_status_determine_context($type = NULL) {
  $contexts = facebook_status_all_contexts();
  if (empty($type)) {
    $context = array();
    //The user context is our base case, so we never end up with no context.
    foreach ($contexts as $context) {
      if (!empty($context['file']) && file_exists($context['file'])) {
        require_once $context['file'];
      }
      //Make sure the parent class is always loaded.
      if (empty($context['parent'])) {
        module_load_include('inc', 'facebook_status', '/includes/utility/facebook_status.contexts');
      }
      else {
        facebook_status_determine_context($context['parent']);
      }
      $context['handler'] = new $context['handler']();
      if ($context['handler']->is_applicable()) {
        break;
      }
    }
  }
  elseif (isset($contexts[$type])) {
    $context = $contexts[$type];
    if (!empty($context['file']) && file_exists($context['file'])) {
      require_once $context['file'];
    }
    //Make sure the parent class is always loaded.
    if (empty($context['parent'])) {
      module_load_include('inc', 'facebook_status', '/includes/utility/facebook_status.contexts');
    }
    else {
      facebook_status_determine_context($context['parent']);
    }
  }
  else {
    //We can't find the requested context, so abort.
    return;
  }
  //title and handler are required.
  $context += array(
    'description' => '',
    'view' => '',
    'weight' => 0,
    'file' => '',
    'parent' => '',
    'dependencies' => array(),
  );
  return $context;
}

/**
 * Gets a list of all contexts.
 * @see facebook_status_determine_context()
 */
function facebook_status_all_contexts() {
  static $contexts;
  if (isset($contexts)) {
    return $contexts;
  }
  $result = db_query("SELECT * FROM {facebook_status_contexts}");
  $contexts = array();
  while ($c = db_fetch_array($result)) {
    $c['in_db'] = TRUE;
    $contexts[$c['type']] = $c;
  }
  $contexts += module_invoke_all('facebook_status_context_info');
  uasort($contexts, '_facebook_status_element_sort');
  foreach ($contexts as $type => $context) {
    if (isset($context['dependencies'])) {
      foreach ($context['dependencies'] as $dependency) {
        if (!module_exists($dependency)) {
          unset($contexts[$type]);
          break;
        }
      }
    }
  }
  return $contexts;
}

/**
 * Delete a status from the database.
 *
 * @param $sid
 *   The Status ID or a status object.
 */
function facebook_status_delete_status($sid) {
  if (is_object($sid)) {
    $sid = $sid->sid;
  }
  //Trigger integration.
  if (module_exists('trigger')) {
    module_invoke_all('facebook_status', 'fbss_deleted', $sid);
  }
  module_invoke_all('facebook_status_delete', $sid);
  db_query("DELETE FROM {facebook_status} WHERE sid = %d", $sid);
}

/**
 * Saves a status into the database.
 *
 * @param $recipient
 *   The object representing the recipient of the status.
 * @param $type
 *   The status stream type.
 * @param $message
 *   The status text to be saved.
 * @param $sender
 *   The user object representing the sender of the status. Defaults to the
 *   current user.
 * @param $options
 *   An array of options that affects what behaviors this function uses. These
 *   are the defaults, used if no option is specified for the relevant keys:
 *   array(
 *     'discard duplicates' => TRUE,
 *     'timed override' => TRUE,
 *     'discard blank statuses' => TRUE,
 *   );
 * @return
 *   The saved status object.
 */
function facebook_status_save_status($recipient, $type, $message, $sender = NULL, $options = array()) {
  $sender = (empty($sender) ? $GLOBALS['user'] : $sender);
  $context = facebook_status_determine_context($type);
  $recipient_id = $context['handler']->recipient_id($recipient);
  $time = time();
  $message = trim($message);
  //Merge in defaults.
  $options += array(
    'discard duplicates' => TRUE,
    'timed override' => TRUE,
    'discard blank statuses' => TRUE,
  );
  //Calls hook_facebook_status_save_options_alter(&$options).
  drupal_alter('facebook_status_save_options', $options);
  //Pretend to have set a new status if the submitted status is exactly the same as the old one.
  $status = _facebook_status_get_status_fast($sender->uid);
  //The status object to be saved.
  $object = (object) array(
    'message' => $message,
    'created' => $time,
    'sender' => $sender->uid,
    'recipient' => $recipient_id,
    'type' => $type,
  );
  if ($message != $status->message || !$options['discard duplicates']) {
    $edit = FALSE;
    //If a new status is submitted on one's own profile within
    //FACEBOOK_STATUS_OVERRIDE_TIMER seconds of the old one, we assume the user
    //didn't mean to post the first one.
    if ($time - $status->created < FACEBOOK_STATUS_OVERRIDE_TIMER && $type = 'user' && $sender->uid == $recipient_id && $options['timed override']) {
      $sql = "UPDATE {facebook_status} SET status = '%s', status_time = %d WHERE sid = %d ORDER BY sid DESC";
      db_query($sql, $message, $time, $status->sid);
      $object->sid = $status->sid;
      $edit = TRUE;
    }
    else {
      //Don't save blank messages unless to clear the user's own last status update.
      //The only reason clearing the last status update would even be needed would be if the most recent status update was displayed by itself somewhere.
      if ($type != 'user' || $sender->uid != $recipient_id || !empty($message) || !$options['discard blank statuses']) {
        drupal_write_record('facebook_status', $object);
      }
    }
    //Invokes hook_facebook_status_save($status, $context, $edit).
    module_invoke_all('facebook_status_save', $object, $context, $edit);
    //Trigger integration. Don't call if the status is blank because usually nothing interesting is happening.
    if (module_exists('trigger') && !empty($message)) {
      $op = 'fbss_submitted_'. $type;
      if ($type == 'user') {
        $op .= ($recipient_id == $sender->uid ? '_self' : '_other');
      }
      module_invoke_all('facebook_status', $op, $object, $context);
    }
  }
  elseif ($new_status == $status->status) {
    $object->sid = $status->sid;
  }
  return $object;
}

//=================
//HELPER FUNCTIONS.
//=================

/**
 * A saner sort function for use in uasort().
 * Identical to element_sort() except uses "weight" instead of "#weight."
 */
function _facebook_status_element_sort($a, $b) {
  $a_weight = (is_array($a) && isset($a['weight'])) ? $a['weight'] : 0;
  $b_weight = (is_array($b) && isset($b['weight'])) ? $b['weight'] : 0;
  if ($a_weight == $b_weight) {
    return 0;
  }
  return ($a_weight < $b_weight) ? -1 : 1;
}

/**
 * Helper function that runs filters on statuses.
 */
function _facebook_status_run_filter($status) {
  if (variable_get('facebook_status_filter', 'none') != 'none') {
    return check_markup($status, variable_get('facebook_status_filter', 'none'), FALSE);
  }
  return check_plain($status);
}

/**
 * Gets the most recent own status update by a user.
 *
 * @param $uid
 *   The User ID of the user whose latest status should be retrieved.
 * @return
 *   A status object.
 */
function _facebook_status_get_status_fast($uid) {
  $status = db_fetch_object(db_query("SELECT * FROM {facebook_status} WHERE sender = %d AND recipient = %d AND type = 'user' ORDER BY sid DESC", $uid, $uid));
  if (!$status) {
    $status = (object) array('sender' => $uid, 'recipient' => $uid, 'message' => '', 'created' => 0, 'type' => 'user');
  }
  return $status;
}

/**
 * Wraps user_load() so it can be statically cached.
 *
 * @param $uid
 *   A User ID.
 * @return
 *   A $user object.
 */
function _facebook_status_user_load($uid) {
  static $accounts = array();
  if (!isset($accounts[$uid])) {
    $accounts[$uid] = user_load(array('uid' => $uid));
  }
  return $accounts[$uid];
}

/**
 * Wraps user_load() so it can be statically cached.
 *
 * @param $name
 *   A username.
 * @return
 *   A $user object.
 */
function _facebook_status_user_load_by_name($name) {
  static $accounts = array();
  if (!isset($accounts[$name])) {
    $accounts[$name] = user_load(array('name' => $name));
  }
  return $accounts[$name];
}

//========================
//STREAM TYPE DEFINITIONS.
//========================

/**
 * Implementation of hook_facebook_status_context_info().
 */
function facebook_status_facebook_status_context_info() {
  $path = drupal_get_path('module', 'facebook_status');
  return array(
    'user' => array(
      'title' => t('User profiles'),
      'description' => t('If a profile is currently being viewed, then the stream belongs to the owner of that profile.') .' '.
        t('Otherwise, the stream belongs to the current user.'),
      'handler' => 'facebook_status_user_context',
      'view' => 'facebook_status_user_stream',
      'weight' => 9999,
      'file' => $path .'/includes/utility/facebook_status.contexts.inc',
    ),
    'node' => array(
      'title' => t('Nodes'),
      'description' => t('The stream belongs to the currently viewed node, if applicable.'),
      'handler' => 'facebook_status_node_context',
      'view' => 'facebook_status_node_stream',
      'weight' => 0,
      'file' => $path .'/includes/utility/facebook_status.contexts.inc',
    ),
    'og' => array(
      'title' => t('Organic Groups'),
      'description' => t('The stream belongs to the currently viewed Organic Group, if applicable.'),
      'handler' => 'facebook_status_og_context',
      'parent' => 'node',
      'dependencies' => array('og'),
      'view' => 'facebook_status_node_stream',
      'weight' => -50,
      'file' => $path .'/includes/utility/facebook_status.contexts.inc',
    ),
  );
}

//====================
//TRIGGER INTEGRATION.
//====================

/**
 * Implementation of hook_hook_info().
 */
function facebook_status_hook_info() {
  $info = array(
    'facebook_status' => array(
      'facebook_status' => array(
        'fbss_deleted' => array(
          'runs when' => t('A status has been deleted'),
        ),
        'fbss_edited' => array(
          'runs when' => t('A status has been edited'),
        ),
        'fbss_submitted' => array(
          'runs when' => t('A user has updated their status'),
        ),
        'fbss_submitted_other' => array(
          'runs when' => t('A user has posted a status message to another stream'),
        ),
      ),
    ),
  );
  foreach (facebook_status_all_contexts() as $type => $details) {
    if ($type == 'user') {
      $info['facebook_status']['facebook_status'] += array(
        'fbss_submitted_user_self' => array(
          'runs when' => t('A user has updated their own status'),
        ),
        'fbss_submitted_user_other' => array(
          'runs when' => t('A user has posted a status message to another user'),
        ),
      );
    }
    else {
      $info['facebook_status']['facebook_status']['fbss_submitted'. $type ] = array(
        'runs when' => t('A user has posted a new status to a stream of type %type', array('%type' => $type)),
      );
    }
  }
  return $info;
}

/**
 * Implementation of hook_facebook_status().
 * or
 * Implementation of hook_trigger_name().
 */
function facebook_status_facebook_status($op, $a1, $context = NULL) {
  if (!in_array($op, array('fbss_deleted', 'fbss_edited')) && strpos($op, 'fbss_submitted') !== 0) {
    return;
  }
  $aids = _trigger_get_hook_aids('facebook_status', $op);
  if ($op == 'fbss_deleted' || $op == 'fbss_edited') {
    $status = facebook_status_load($a1);
  }
  elseif (strpos($op, 'fbss_submitted') === 0) {
    $status = $a1;
  }
  $context = facebook_status_determine_context($status->type);
  $recipient = $context['handler']->load_recipient($status->recipient);
  $sender = _facebook_status_user_load($status->sender);

  //Reduce the amount of recalculation we will need to do later.
  $sender->facebook_status = $status;
  $sender->context = $context;

  $activity_context = array(
    'hook' => 'facebook_status',
    'op' => $op,
    'sender' => $sender,
    'recipient' => $recipient,
    'type' => $status->type,
    'facebook_status' => $status,
    'context' => $context,
  );
  actions_do(array_keys($aids), $sender, $activity_context);
}

//==================
//TOKEN INTEGRATION.
//==================

/**
 * Implementation of hook_token_list().
 */
function facebook_status_token_list($type = 'all') {
  if ($type == 'facebook_status') {
    $tokens['facebook_status'] = array(
      'sender-themed' => t('The themed name of the user who posted the status message.'),
      'sender-name' => t('The safe name of the user who posted the status message.'),
      'sender-name-raw' => t('The raw name of the user who posted the status message. WARNING: raw user input.'),
      'sender-uid' => t('The User ID of the user who posted the status message.'),
      'recipient-type-name' => t('The machine name of the stream type of the recipient.'),
      'recipient-type-title' => t('The readable name of the stream type of the recipient.'),
      'recipient-link' => t('A link to the recipient.'),
      'recipient-name' => t('The safe name of the recipient of the status message.'),
      'recipient-name-raw' => t('The raw name of the recipient of the status message. WARNING: raw user input.'),
      'recipient-id' => t('The ID of the recipient of the status message.'),
      'status-unformatted' => t('The new status, with HTML escaped but no filters or anything run over it.'),
      'status-formatted' => t('The new status completely themed.'),
      'status-raw' => t('The completely unfiltered status text. WARNING: raw user input.'),
      'status-themed' => t('The new status completely themed, including usernames and times.'),
      'status-id' => t('The Status ID.'),
      'status-edit' => t('Edit status link.'),
      'status-delete' => t('Delete status link.'),
      'status-time' => t('The themed time the status was submitted.'),
    );
    if (module_exists('fbssc')) {
      $tokens['facebook_status']['status-comment-count'] = t('The number of comments on the status.');
    }
    $tokens['facebook_status'] += token_get_date_token_info(t('The status created'), 'status-time-');
    return $tokens;
  }
}

/**
 * Implementation of hook_token_values().
 */
function facebook_status_token_values($type, $data = NULL, $options = array()) {
  if ($type != 'facebook_status' || empty($data)) {
    return;
  }
  //@todo: Figure out whether this actually works.
  $status = $data->facebook_status;
  $context = $data->context;

  $message_formatted = _facebook_status_run_filter($status->message);
  if (variable_get('facebook_status_nl2br', 0)) {
    $message_formatted = nl2br($message_formatted);
  }
  $edit = '';
  $delete = '';
  if (facebook_status_user_access('edit', $status)) {
    $edit = '<span class="facebook_status-edit-link facebook_status-action-link">'. l(t('Edit'), 'statuses/'. $status->sid .'/edit') .'</span>';
  }
  if (facebook_status_user_access('delete', $status)) {
    $delete = '<span class="facebook_status-delete-link facebook_status-action-link">'.  l(t('Delete'), 'statuses/'. $status->sid .'/delete') .'</span>';
  }
  $sender = _facebook_status_user_load($status->sender);
  $recipient = _facebook_status_user_load($status->recipient);
  $values = array(
    'sender-themed' => theme('username', $sender),
    'sender-name' => check_plain($sender->name),
    'sender-name-raw' => $sender->name,
    'sender-uid' => $sender->uid,
    'recipient-type-name' => $status->type,
    'recipient-type-title' => $context['title'],
    'recipient-link' => $context['handler']->recipient_link($recipient),
    'recipient-name' => check_plain($context['handler']->recipient_name($recipient)),
    'recipient-name-raw' => $context['handler']->recipient_name($recipient),
    'recipient-id' => $context['handler']->recipient_id($recipient),
    'status-unformatted' => check_plain($status->message),
    'status-formatted' => $message_formatted,
    'status-raw' => $status->message,
    'status-themed' => theme('facebook_status_item', $status),
    'status-id' => $status->sid,
    'status-edit' => $edit,
    'status-delete' => $delete,
    'status-comment-count' => (module_exists('fbssc')) ? fbssc_count_comments($status->sid) : 0,
    'status-time' => format_date($status->status_time, 'small'),
  );
  $values += token_get_date_token_values($status->created, 'status-time-');
  return $values;
}

//==================
//VIEWS INTEGRATION.
//==================

/**
 * Implementation of hook_views_api().
 */
function facebook_status_views_api() {
  return array('api' => 2);
}

/**
 * Displays the user picture with fixes for unfortunate magic found in Garland
 * and other themes.
 */
function facebook_status_display_user_picture($account) {
  drupal_add_css(drupal_get_path('module', 'facebook_status') .'/facebook_status.css');
  return theme('user_picture', $account);
}

//==========================
//SMS FRAMEWORK INTEGRATION.
//==========================

/**
 * Implementation of hook_sms_incoming().
 */
function facebook_status_sms_incoming($op, $number, $message, $options = NULL) {
  global $user;
  if ($op == 'process' && $user->uid && drupal_substr($message, 0, 3) == 's: ') {
    $maxlen = variable_get('facebook_status_length', 140);
    $message = drupal_substr($message, 3);
    if (drupal_strlen($message) > $maxlen && $maxlen > 0) {
      $message = drupal_substr($message, 0, $maxlen - 3) .'...';
    }
    facebook_status_save_status($user, 'user', $message);
  }
}

//==================================
//VIEWS BULK OPERATIONS INTEGRATION.
//==================================

/**
 * Implementation of hook_views_bulk_operations_object_info().
 */
function facebook_status_views_bulk_operations_object_info() {
  return array(
    'facebook_status' => array(
      'type' => 'facebook_status',
      'base_table' => 'facebook_status',
      'load' => 'facebook_status_load',
      'title' => 'status',
    ),
  );
}

//===================
//CTOOLS INTEGRATION.
//===================

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function facebook_status_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'includes/ctools/'. $plugin;
  }
}
