<?php
// $Id$

/**
 * @file
 * Facebook-style statuses gives each user a status that they can update and others can view.
 *
 * The module provides a number of blocks and integration with other modules to maximize usability.
 * In addition, several convenient hooks are provided to facilitate custom blocks.
 */

/**
 * Implementation of hook_help().
 */
function facebook_status_help($section='') {

  $output = '';

  switch ($section) {
    case "admin/help#facebook_status":
      $output = '<p>'. t("This module adds a Facebook-style status block.  Please see <a href=\"http://drupal.org/project/facebook_status\" title=\"http://drupal.org/project/facebook_status\" rel=\"nofollow\">http://drupal.org/project/facebook_status</a> for more information.") .'</p>';
      break;
  }

  return $output;
}

/**
 * Implementation of hook_perm().
 */
function facebook_status_perm() {
  //Note that, since all this module does is provide a block, there is no need for an 'access facebook_status' permission because access can be set in the block's settings.
  return array('edit own facebook_status', 'edit all facebook_status');
}

/**
 * Implementation of hook_block().
 */
function facebook_status_block($op='list', $delta=0) {
  if ($op == "list") {
    $block[0]["info"] = t("Facebook Status");
    $block[1]["info"] = t("Facebook Status Recent Updates");
    if (module_exists('user_relationships')) {
      $block[2]["info"] = t("Facebook Status UR Recent Updates");
    }
    return $block;
  }
  else if ($op == 'view') {
    switch ($delta) {
    case 0:
      global $user;
      $x = FALSE;
      $path = drupal_get_path('module', 'facebook_status');
      if (variable_get('facebook_status_ajax', 1)) {
        drupal_add_js($path .'/facebook_status.js');
      }
      $block_content = '<div class="facebook_status_block">';
      if ( (((arg(0) == 'user' && is_numeric(arg(1)) && arg(1) == $user->uid)
        || (arg(0) == 'node' && is_numeric(arg(1)) && db_result("SELECT uid FROM node WHERE nid = %d", arg(1)) == $user->uid))
        && user_access('edit own facebook_status'))
        || user_access('edit all facebook_status') ) {
        $block_content .= '<div class="facebook_status_form">'. facebook_status_form_display() .'</div>';
        $x = TRUE;
      }
      if (arg(0) == 'user' && is_numeric(arg(1))) {
        $uname = db_result(db_query("SELECT name FROM {users} WHERE uid = %d", arg(1)));
        //htmlspecialchars instead of the usual check_plain because names sometimes have quotes in them.
        $fbs_name = htmlspecialchars($uname, ENT_NOQUOTES);
        $sm = db_fetch_array(db_query_range("SELECT status_fb, status_time FROM {facebook_status} WHERE uid = %d ORDER BY status_time DESC", arg(1), 0, 1));
      }
      else if (arg(0) == 'node' && is_numeric(arg(1))) {
        $fbs_user = db_result(db_query("SELECT uid, name FROM {users} LEFT JOIN node ON node.uid = users.uid WHERE node.nid = %d", arg(1)));
        $fbs_name = htmlspecialchars($fbs_user['name'], ENT_NOQUOTES);
        $sm = db_fetch_array(db_query_range("SELECT status_fb, status_time FROM {facebook_status} WHERE uid = %d ORDER BY status_time DESC", $fbs_user['uid'], 0, 1));
      }
      else {
        $fbs_name = htmlspecialchars($user->name, ENT_NOQUOTES);
        $sm = db_fetch_array(db_query_range("SELECT status_fb, status_time FROM {facebook_status} WHERE uid = %d ORDER BY status_time DESC", $user->uid, 0, 1));
      }
      $block_content .= '<div class="facebook_status_status">';
      if ($x) {
        //if the form is going to show up (i.e. if a user can edit their status) then apply 'a' formatting to the status so it looks clickable so users are aware that the form will appear using AJAX.
        $block_content .= '<a class="facebook_status_ajax_clickable_text">';
      }
      if (variable_get('facebook_status_mode', 1)) {
        $block_content .= $fbs_name;
      }
      if ($sm['status_time']) {
        $block_content .= " ". htmlspecialchars($sm['status_fb'], ENT_NOQUOTES) ." <span class='". t("submitted") ."'>". format_interval(time() - $sm['status_time'], 1) . t(' ago') ."</span>";
      }
      //if the user has not posted a status
      else {
        if (!variable_get('facebook_status_mode', 1)) {
          $block_content .= $fbs_name;
        }
        //With Facebook Mode off, a suggestion might be " has not yet posted thoughts" or similar.
        $block_content .= t(" does not yet have a status.");
      }
      if ($x) {
        $block_content .= '</a>';
      }
      $block_content .= '</div></div>';
      $block['subject'] = 'Status';
      $block['content'] = $block_content;
      break;
    case 1:
      $c_array = facebook_status_get_status(-1, variable_get('facebook_status_max_num_block_stats_all', 5));
      $block_content = "<div class='facebook_status_block_all'><ul>";
      foreach ($c_array as $row) {
        $block_content .= "<li>". l(htmlspecialchars($row['fbs_name'], ENT_NOQUOTES), "user/". $row['fbs_uid']) . t(" ") . htmlspecialchars($row['status_fb'], ENT_NOQUOTES) ." <div class='". t("submitted") ."'>". format_interval(time() - $row['status_time'], 1) . t(' ago') ."</div></li>";
      }
      $block_content .= "</ul></div>";
      $block['subject'] = "Recent Status Updates";
      $block['content'] = $block_content;
      break;
    case 2:
      //This module_exists() may not be necessary because $block[2]["info"] is also wrapped in module_exists().
      if (module_exists('user_relationships')) {
        $subject = db_result(db_query("SELECT plural_name FROM {user_relationship_types} WHERE rtid = %d", variable_get('facebook_status_ur_type', 1)));
        $block['subject'] = $subject . t("' Recent Status Updates");
        $block['content'] = facebook_status_get_ur_status();
      }
      break;
    }
    return $block;
  }

}

/**
 * FAPI definition for the status update form.
 *
 * facebook_status_form_display() renders the form via drupal_get_form().
 *
 * @ingroup forms
 * @see facebook_status_update_form_submit()
 * @see facebook_status_update_form_validate()
 */
function facebook_status_update_form() {
  global $user;
  if (variable_get('facebook_status_mode', 1)) {
    if (arg(0) == 'user' && is_numeric(arg(1))) {
      $uname = db_result(db_query("SELECT name FROM {users} WHERE uid = %d", arg(1)));
      $xname = htmlspecialchars($uname, ENT_NOQUOTES);
    }
    else if (arg(0) == 'node' && is_numeric(arg(1))) {
      $fbs_user = db_result(db_query("SELECT uid, name FROM {users} LEFT JOIN node ON node.uid = users.uid WHERE node.nid = %d", arg(1)));
      $xname = htmlspecialchars($fbs_user['name'], ENT_NOQUOTES);
    }
    else {
      $xname = htmlspecialchars($user->name, ENT_NOQUOTES);
      $sm = db_fetch_array(db_query_range("SELECT status_fb, status_time FROM {facebook_status} WHERE uid = %d ORDER BY status_time DESC", $user->uid, 0, 1));
    }
    //This needs to be done here instead of in the actual #title so it can be turned off if Facebook Mode is off.
    $xname = ": " . $xname;
  }
  else {
    $xname = '';
  }
  $status = facebook_status_get_status();
  //Warning: the status column in the {facebook_status} table only holds 255 bytes.
  //In strict SQL mode, statuses larger than this will not be saved; in other modes, they will be truncated.
  //This is relevant for the #maxlength attribute; do not set a #maxlength larger than the column can hold.
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t("Status") . $xname,
    '#size' => variable_get('facebook_status_field_length', 30),
    '#maxlength' => variable_get('facebook_status_length', 192),
    '#description' => t("Please enter your status.  Remember that it will not update unless you click 'Save.'"),
    '#default_value' => ((!empty( $status[0]['status_fb'] ) ) ? htmlspecialchars($status[0]['status_fb'], ENT_NOQUOTES) : t("is ")),
  );
  $form['submit'] = array('#type' => 'submit', '#value' => t("Save") );
  return $form;
}

/**
 * Renders themed HTML for the status update form.
 */
function facebook_status_form_display() {
  return drupal_get_form('facebook_status_update_form');
}

/**
 * FAPI submit function for facebook_status_update_form().
 * Implementation of hook_submit().
 *
 * There are separate sections for the different permission types because it's easier to read and runs a little faster
 * than if only the 'edit all' section was used and permissions were checked each time before setting $uid.
 * The result is that the code is slightly longer and so more is loaded on bootstrap.
 * This is all technically unnecessary in terms of this module because the form doesn't render if it can't be used,
 * but it saves a lot of work for anyone who decides to render the form arbitrarily.
 *
 * Indentation is slightly irregular because permission checking was added after most of the code was written.
 *
 * @see facebook_status_update_form()
 * @see facebook_status_update_form_validate()
 */
function facebook_status_update_form_submit($form, $form_values) {
  global $user;
      //Note that this first part is only for people who can edit their own status, so we don't need to check whose database records to update.
      if ( user_access('edit own facebook_status') && !user_access('edit all facebook_status') ) {
  if ( db_query("INSERT INTO {facebook_status} (status_fb, status_time, uid) VALUES('%s', %d, %d)", $form_values['name'], time(), $user->uid) ) {
    //Only save last $num_status updates; delete excess updates if there are too many.  Zero is the equivalent of infinite.
    if ( variable_get('facebook_status_number', 10) ) {
      $count = db_result(db_query("SELECT COUNT(sid) FROM {facebook_status} WHERE uid = %d", $user->uid)) - variable_get('facebook_status_number', 10);
      if ( $count > 0 ) {
        db_query_range("DELETE FROM {facebook_status} WHERE uid = %d ORDER BY status_time ASC", $user->uid, 0, $count);
      }
    }
    drupal_set_message(t('Your status has been updated.'));
    if (module_exists('activity') && variable_get('facebook_status_activity', 1)) {
      facebook_status_activity('activity', $user->uid, '', $form_values['name'], time());
    }
  }
  else {
    drupal_set_message(t('An error has occurred while updating your status.  Please try again.  If the problem persists, please contact an administrator.'), 'error');
  }
      }
      else if (user_access('edit all facebook_status')) {
  //Determine the uid of the user whose status will be updated.
  if ( arg(0) == 'user' && is_numeric(arg(1)) ) {
    $uid = arg(1);
  }
  else if ( arg(0) == 'node' && is_numeric(arg(1)) ) {
    $uid = db_result(db_query("SELECT uid FROM {node} WHERE nid = %d", arg(1)));
  }
  else {
    $uid = $user->uid;
  }
  if ( db_query("INSERT INTO {facebook_status} (status_fb, status_time, uid) VALUES('%s', %d, %d)", $form_values['name'], time(), $uid) ) {
    //Only save last $num_status updates; delete excess updates if there are too many.  Zero is the equivalent of infinite.
    if ( variable_get('facebook_status_number', 10) ) {
      $count = db_result(db_query("SELECT COUNT(sid) FROM {facebook_status} WHERE uid = %d", $uid)) - variable_get('facebook_status_number', 10);
      if ( $count > 0 ) {
          db_query_range("DELETE FROM {facebook_status} WHERE uid = %d ORDER BY status_time ASC", $uid, 0, $count);
      }
    }
    drupal_set_message(t('The status has been updated.'));
    if (module_exists('activity') && variable_get('facebook_status_activity', 1)) {
      facebook_status_activity('activity', $uid, '', $form_values['name'], time());
    }
  }
  else {
    drupal_set_message(t('An error has occurred while updating the status.  Please try again.'), 'error');
  }
      }
      //This technically shouldn't happen, but we need a catch in case someone without permission manages to submit the form.
      else {
        drupal_set_message(t('An error has occurred while updating the status: you do not have permission to perform this action.  Please contact an administrator.'), 'error');
      }
}

/**
 * FAPI validate function for facebook_status_update_form().
 * Implementation of hook_validate().
 *
 * There are separate sections for the different permission types because it's easier to read and runs a little faster
 * than if only the 'edit all' section was used and permissions were checked each time before setting $uid.
 * The result is that the code is slightly longer and so more is loaded on bootstrap.
 * This is all technically unnecessary in terms of this module because the form doesn't render if it can't be used,
 * but it saves a lot of work for anyone who decides to render the form arbitrarily.
 *
 * @see facebook_status_update_form()
 * @see facebook_status_update_form_submit()
 */
function facebook_status_update_form_validate($form_id, $form_values) {
  global $user;
  if ( user_access('edit own facebook_status') && !user_access('edit all facebook_status') ) {
    if ($form_values['name'] == '' || $form_values['name'] == ' ') {
      $last_status = db_result(db_query_range("SELECT status_fb FROM {facebook_status} WHERE uid = %d ORDER BY status_time DESC", $user->uid, 0, 1));
      if ( $last_status ) {
        $form_values['name'] = $last_status;
      }
      else {
        form_set_error('', t('You must enter a status in order to save it.'));
      }
    }
  }
  //The only difference in this section is that $uid is used instead of $user->uid.
  else if (user_access('edit all facebook_status')) {
    if ($form_values['name'] == '' || $form_values['name'] == ' ') {
      if ( arg(0) == 'user' && is_numeric(arg(1)) ) {
        $uid = arg(1);
      }
      else if ( arg(0) == 'node' && is_numeric(arg(1)) ) {
        $uid = db_result(db_query("SELECT uid FROM {node} WHERE nid = %d", arg(1)));
      }
      else {
        $uid = $user->uid;
      }
      $last_status = db_result(db_query_range("SELECT status_fb FROM {facebook_status} WHERE uid = %d ORDER BY status_time DESC", $uid, 0, 1));
      if ( $last_status ) {
        $form_values['name'] = $last_status;
      }
      else {
        form_set_error('', t('You must enter a status in order to save it.'));
      }
    }
  }
}

/**
 * Gets user statuses.
 *
 * The process for figuring out $fbs_uid here is emulated several times in this module, but it is demonstrated most clearly here.
 * Warning: the status is not escaped, so developers still need to do validation to make sure there are no XSS attacks.
 *
 * To do: allow passing in an array of UIDs for $fbs_uid so multiple users can be specified.
 *   Right now, the easiest way for developers to achieve this effect is to use this function in a loop and pass a single UID in separately each time.
 *
 * @param $fbs_uid
 *   The UID for the user whose status(es) should be returned.
 *   If not passed and the current page is a user profile, then we use the uid of the user whose profile is being viewed.
 *   If not passed and the current page is a node, then we use the uid of the author of that node.
 *   If not passed and the current page is neither a node nor a user profile, we use the current user's uid.
 *   If -1, the latest status updates for all users are returned, but only one status update is returned per user.
 *   If less than -1, all the latest status updates (for any user) are returned.
 * @param $num_results
 *   The number of results to return for the relevant user(s).
 *   If zero, all results are returned.
 * @return
 *   An array with the status, status-posted-time, uid, and username of the user whose uid is passed to the function as $fbs_uid.
 *   Keys are status_fb, status_time, fbs_uid, and fbs_name, respectively.
 *   The username is useful for extra theming and/or linking.
 */
function facebook_status_get_status($fbs_uid = 0, $num_results = 1) {
  //Queries are constructed semi-dynamically before they become relevant in order to properly use db_query_range instead of the SQL LIMIT command which is not cross-database-compatible.
  $result = array();
  //We do some extra work with is_numeric to prevent errors when non-numeric values get passed in.
  if ( !$fbs_uid || !is_numeric($fbs_uid) ) {
    if ( arg(0) == 'user' && is_numeric(arg(1)) ) {
      $fbs_uid = arg(1);
    }
    else if ( arg(0) == 'node' && is_numeric(arg(1)) ) {
      $fbs_uid = db_result(db_query("SELECT uid FROM {node} WHERE nid = %d", arg(1)));
    }
    else {
      global $user;
      $fbs_uid = $user->uid;
    }
  }
  if ( !is_numeric($num_results) ) {
    $num_results = 1;
    $query = db_query_range("SELECT status_fb, status_time FROM {facebook_status} WHERE uid = %d ORDER BY status_time DESC", $fbs_uid, 0, 1);
    $query_2 = db_query_range("SELECT uid as fbs_uid, status_fb, status_time FROM {facebook_status} %s ORDER BY status_time DESC", $duid, 0, 1);
  }
  else if (is_numeric($num_results) && $num_results == 0) {
    $query = db_query("SELECT status_fb, status_time FROM {facebook_status} WHERE uid = %d ORDER BY status_time DESC", $fbs_uid);
    $query_2 = db_query("SELECT uid as fbs_uid, status_fb, status_time FROM {facebook_status} %s ORDER BY status_time DESC", $duid);
  }
  else {
    if ($fbs_uid < -1) {
      $duid = "";
    }
    else {
      $duid = "GROUP BY fbs_uid";
    }
    $query = db_query_range("SELECT status_fb, status_time FROM {facebook_status} WHERE uid = %d ORDER BY status_time DESC", $fbs_uid, 0, $num_results);
    $query_2 = db_query_range("SELECT uid as fbs_uid, status_fb, status_time FROM {facebook_status} %s ORDER BY status_time DESC", $duid, 0, $num_results);
  }
  if ( $fbs_uid > 0 ) {
    $result = array();
    $i = 0;
    while ($row = db_fetch_array($query)) {
      $result[$i] = $row;
      //Adding the name to the array is a convenience, but don't forget to add a space between it and the status.
      $result[$i]['fbs_name'] = db_result(db_query("SELECT name FROM {users} WHERE uid = %d", $fbs_uid));
      $result[$i]['fbs_uid'] = $fbs_uid;
      $i++;
    }
  }
  else if ( $fbs_uid < 0 ) {
    $result = array();
    $i = 0;
    while ($row = db_fetch_array($query_2)) {
      $row['status_fb'] = drupal_substr($row['status_fb'], 0, variable_get('facebook_status_max_block_len_all', variable_get('facebook_status_length', 192)));
      if ( drupal_strlen($row['status_fb']) == variable_get('facebook_status_max_block_len_all', variable_get('facebook_status_length', 192)) ) {
        $row['status_fb'] .= "...";
      }
      $result[$i] = $row;
      //Adding the name to the array is a convenience, but don't forget to add a space between it and the status.
      $result[$i]['fbs_name'] = db_result(db_query("SELECT name FROM {users} WHERE uid = %d", $result[$i]['fbs_uid']));
      $i++;
    }
  }
  //Should technically never happen.
  else {
    $result = t("Error: anonymous users have no status.");
  }
  return $result;
}


/**
 * FAPI documentation for the administrative settings page.
 *
 * To do: divide this into collapsible fieldsets.
 *
 * @ingroup forms
 * @see facebook_status_admin_validate()
 */
function facebook_status_admin() {

  $form['facebook_status_field_length'] = array(
    '#type' => 'textfield',
    '#title' => t('Length of the Status textfield'),
    '#default_value' => variable_get('facebook_status_field_length', 30),
    '#size' => 3,
    '#maxlength' => 3,
    '#description' => t("30 is standard length for a sidebar block (and the default); 72 is standard for most content and footer blocks.")
  );

  $form['facebook_status_length'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum length of a status'),
    '#default_value' => variable_get('facebook_status_length', 192),
    '#size' => 3,
    '#maxlength' => 3,
    '#description' => t("192 is the default; 255 is the maximum; no higher than 240 is recommended.  This is the length that shows up on the Facebook Status block.")
  );

if (module_exists('user_relationships')) {
  $form['facebook_status_max_block_len'] = array(
    '#type' => 'textfield',
    '#title' => t('Shorten statuses in the Facebook Status UR Recent Updates to this length'),
    '#default_value' => variable_get('facebook_status_max_block_len', variable_get('facebook_status_length', 192)),
    '#size' => 3,
    '#maxlength' => 3,
    '#description' => t("The maximum length of a status is the default and maximum; 25 is the minimum.  You may want to lower this if you have more than one status showing on the block.")
  );

  $form['facebook_status_max_num_block_stats'] = array(
    '#type' => 'textfield',
    '#title' => t('The maximum number of statuses to show in the Facebook Status UR Recent Updates block'),
    '#default_value' => variable_get('facebook_status_max_num_block_stats', 5),
    '#size' => 3,
    '#maxlength' => 3,
    '#description' => t("5 is the default, 1 is the minimum, and the maximum number of status updates you keep in the database for each user is the maximum.")
  );

  $fbsur_result = db_query("SELECT plural_name, rtid FROM {user_relationship_types}");
  while ($row = db_fetch_array($fbsur_result)) {
    $i = $row['rtid'];
    $fbsur[$i] = $row['plural_name'];
  }
  $form['facebook_status_ur_type'] = array(
    '#type' => 'select',
    '#title' => t('User Relationship type to use for the Facebook Status UR Recent Updates block'),
    '#default_value' => variable_get('facebook_status_ur_type', 1),
    '#options' => $fbsur,
  );
}

  $form['facebook_status_max_block_len_all'] = array(
    '#type' => 'textfield',
    '#title' => t('Shorten statuses in the Facebook Status Recent Updates block to this length'),
    '#default_value' => variable_get('facebook_status_max_block_len_all', variable_get('facebook_status_length', 192)),
    '#size' => 3,
    '#maxlength' => 3,
    '#description' => t("The maximum length of a status is the default and maximum; 25 is the minimum.  You may want to lower this if you have more than one status showing on the block.")
  );

  $form['facebook_status_max_num_block_stats_all'] = array(
    '#type' => 'textfield',
    '#title' => t('The maximum number of statuses to show in the Facebook Status Recent Updates block'),
    '#default_value' => variable_get('facebook_status_max_num_block_stats_all', 5),
    '#size' => 3,
    '#maxlength' => 3,
    '#description' => t("5 is the default, 1 is the minimum.")
  );

  $form['facebook_status_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of status updates to keep in the database for each user'),
    '#default_value' => variable_get('facebook_status_number', 10),
    '#size' => 3,
    '#maxlength' => 3,
    '#description' => t("10 is the default; enter 0 for unlimited.  This is just to help keep your database small(er).")
  );

  $form['facebook_status_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Facebook Mode'),
    '#default_value' => variable_get('facebook_status_mode', 1),
    '#description' => t("Facebook Mode makes this module work like Facebook, where the user's username is appended to the front of the status.  Default is On."),
  );

  $form['facebook_status_ajax'] = array(
    '#type' => 'checkbox',
    '#title' => t('Slide Effect'),
    '#default_value' => variable_get('facebook_status_ajax', 1),
    '#description' => t("With this enabled, users who have permission to edit statuses can click on the status to see the edit box drop down.  This minimizes the space that Facebook Status takes up.  Default is On."),
  );

  if (module_exists('activity')) {
    $form['facebook_status_activity'] = array(
      '#type' => 'checkbox',
      '#title' => t('Activity notifications'),
      '#default_value' => variable_get('facebook_status_activity', 1),
      '#description' => t("When enabled, status updates are recorded by the activity module.  Default is On."),
    );
  }

  return system_settings_form($form);
}

/**
 * FAPI validate function for facebook_status_admin().
 * Implementation of hook_validate().
 *
 * @see facebook_status_admin()
 */
function facebook_status_admin_validate($form_id, $form_values) {
  if (!(is_numeric($form_values['facebook_status_field_length']) && $form_values['facebook_status_field_length'] <= variable_get('facebook_status_length', 192) && $form_values['facebook_status_field_length'] > 1)) {
    form_set_error('', t('Please enter a number between 1 and the maximum status length, inclusive, for the length of the status textfield.'));
  }
  if (!(is_numeric($form_values['facebook_status_length']) && $form_values['facebook_status_length'] <= 255 && $form_values['facebook_status_length'] > 1)) {
    form_set_error('', t('Please enter a number between 1 and 255, inclusive, for the maximum status length.'));
  }
  if (!(is_numeric($form_values['facebook_status_number']) && $form_values['facebook_status_number'] <= 999 && $form_values['facebook_status_number'] > 1)) {
    form_set_error('', t('Please enter a number between 0 and 999, inclusive, for the maximum number of status updates to keep in the database for each user; use zero to keep all updates.'));
  }
if (module_exists('user_relationships')) {
  if (!(is_numeric($form_values['facebook_status_max_num_block_stats']) && $form_values['facebook_status_max_num_block_stats'] >= 1)) {
    form_set_error('', t('Please enter a number between 1 and the maximum number of status updates kept in the database for each user, inclusive, for the maximum number of statuses to show in the Facebook Status UR Recent Updates block.'));
  }
  if (!(is_numeric($form_values['facebook_status_max_block_len']) && $form_values['facebook_status_max_block_len'] >= 25)) {
    form_set_error('', t('Please enter a number between 25 and the maximum status length, inclusive, for the maximum length of statuses in the Facebook Status UR Recent Updates block.'));
  }
}
  if (!(is_numeric($form_values['facebook_status_max_block_len_all']) && $form_values['facebook_status_max_block_len_all'] >= 25)) {
    form_set_error('', t('Please enter a number between 25 and the maximum status length, inclusive, for the maximum length of statuses in the Facebook Status Recent Updates block.'));
  }
  if (!(is_numeric($form_values['facebook_status_max_num_block_stats_all']) && $form_values['facebook_status_max_num_block_stats_all'] >= 1)) {
    form_set_error('', t('Please enter a number above zero for the maximum number of statuses to show in the Facebook Status Recent Updates block.'));
  }
}

/**
 * Implementation of hook_menu().
 */
function facebook_status_menu() {

  $items = array();

  $items[] = array(
    'path' => 'admin/settings/facebook_status',
    'title' => t('Facebook Status settings'),
    'description' => t('Allows administrators to adjust certain display settings for Facebook Status.'),
    'callback' => 'drupal_get_form',
    'callback arguments' => 'facebook_status_admin',
    'access' => user_access('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Gets the latest status updates from users with whom the current user has a relationship.
 *
 * To do: allow more than one status update to be returned per user.
 *   Allow more than one rtid.
 *
 * @param $ur_rtid
 *   The relationship type ID (rtid) to use when determining which users the current user relates to.
 *   If a rtid is not passed, this function uses the default relationship specified on the Facebook Status settings page.
 * @param $number
 *   The number of statuses returned..
 *   If not passed, defaults to the setting from the Facebook Status settings page.
 * @return
 *   Themed HTML listing status updates from users with whom the current user has a relationship, or
 *   FALSE if there are no relationship types yet.
 */
function facebook_status_get_ur_status($ur_rtid = -1, $number = 0) {
  if (!is_numeric($number) || $number < 0) {
    $number = 0;
  }
  if (!$number) {
    $number = variable_get('facebook_status_max_num_block_stats', 5);
  }
  if ($ur_rtid = -1) {
    $ur_rtid = variable_get('facebook_status_ur_type', 1);
  }
  if (db_num_rows(db_query("SELECT * FROM {user_relationship_types}"))) {
    global $user;
    //Dynamically build queries based on whether the relevant relationship type is one-way and/or requires approval.
    $ur_object = db_fetch_array(db_query("SELECT is_oneway, requires_approval FROM {user_relationship_types} WHERE rtid = %d", $ur_rtid));
    if ($ur_object['is_oneway'] == 1) {
      $ur_oneway_urjoin = "u.uid = ur.requester_id";
      $ur_oneway_fbjoin = "ur.requester_id = fb.uid";
      $ur_oneway_urwhere = "ur.requester_id = ". $user->uid;
    }
    else {
      $ur_oneway_urjoin = "(u.uid = ur.requester_id OR u.uid = ur.requestee_id)";
      $ur_oneway_fbjoin = "(ur.requester_id = fb.uid OR ur.requestee_id = fb.uid)";
      $ur_oneway_urwhere = "(ur.requester_id = ". $user->uid ." OR ur.requestee_id = ". $user->uid .")";
    }
    if ($ur_object['requires_approval'] = 1) {
      $ur_requires_approval = "AND (ur.approved = 1)";
    }
    else {
      $ur_requires_approval = "";
    }
    $user_rel = db_query("
    SELECT u.uid, u.name, fb.status_fb, fb.status_time
    FROM {users} AS u
    LEFT JOIN {user_relationships} AS ur
      ON %s
    LEFT JOIN {facebook_status} AS fb
      ON %s
    WHERE %s
      AND %s
      %s
      AND (ur.rtid = %d)
      AND (u.uid = fb.uid)
    GROUP BY (u.name)
    ORDER BY fb.status_time DESC
    ", $ur_oneway_urjoin, $ur_oneway_fbjoin, $ur_oneway_urjoin, $ur_oneway_urwhere, $ur_requires_approval, $ur_rtid);

    $output = "<div class='facebook_status_ur_block'>";
    $output .= "<ul>";
    //Count by $i instead of using db_query_range() so we can exclude the current user and still end up with the right number of results.
    //Admittedly, this is a little slower.
    $i = 0;
    while ($row = db_fetch_array($user_rel)) {
      if ($row['uid'] != $user->uid) {
        $row['status_fb'] = drupal_substr($row['status_fb'], 0, variable_get('facebook_status_max_block_len', variable_get('facebook_status_length', 192)));
        if ( drupal_strlen($row['status_fb']) == variable_get('facebook_status_max_block_len', variable_get('facebook_status_length', 192)) ) {
          $row['status_fb'] .= "...";
        }
        $output .= "<li>". l(htmlspecialchars($row['name'], ENT_NOQUOTES), "user/". $row['uid']) . t(" ") . htmlspecialchars($row['status_fb'], ENT_NOQUOTES) ." <div class='" . t("submitted") ."'>". format_interval(time() - $row['status_time'], 1) . t(' ago') ."</div></li>";
        $i++;
        if ($i >= $number) {
          break;
        }
      }
    }
    $output .= "</ul></div>";
    return $output;
  }
  else {
    return FALSE;
  }
}

/**
 * Implementation of hook_activity().
 * Integration with activity.module.
 *
 * If neither $status nor $status_time are specified, the latest status is used.
 * If only one is specified, the other is figured out.
 * If either or both $uid or $uname are not specified, they are figured out.
 * Passing in the variables is not necessary but facilitates optimization, since it helps avoids database queries.
 *
 * @param $op
 *   Specifies whether to record a status update or define tokens.
 * @param $uid
 *   The UID of the user whose status was updated.
 * @param $uname
 *   The username of the user whose status was updated.
 * @param $status
 *   The new status of the user whose status was updated.
 * @param $status_time
 *   The timestamp at which the relevant user's status was last updated.
 * @return
 *   If $op is 'activity' nothing is returned but a new activity record is created.
 *   If $op is 'token' an array is returned with this module's tokens inside.
 *
 * @see facebook_status_activity_info()
 */
function facebook_status_activity($op='activity', $uid=0, $uname='', $status='', $status_time='') {
  if (!($uid && $uname)) {
    if ( arg(0) == 'user' && is_numeric(arg(1)) ) {
      $uid = arg(1);
      $uname = db_result(db_query("SELECT name FROM {users} WHERE uid = %d", $uid));
    }
    else if ( arg(0) == 'node' && is_numeric(arg(1)) ) {
      $uid = db_result(db_query("SELECT uid FROM {node} WHERE nid = %d", arg(1)));
      $uname = db_result(db_query("SELECT name FROM {users} WHERE uid = %d", $uid));
    }
    else {
      global $user;
      $uid = $user->uid;
      $uname = $user->name;
    }
  }
  else if ($uid && !$uname) {
    $uname = db_result(db_query("SELECT name FROM {users} WHERE uid = %d", $uid));
  }
  else if ($uname && !$uid) {
    $uid = db_result(db_query("SELECT uid FROM {users} WHERE name = %s", $uname));
  }
  if (!($status && $status_time)) {
    $object = db_fetch_array(db_query_range("SELECT status_fb, status_time FROM {facebook_status} WHERE uid = %d ORDER BY status_time DESC", $uid, 0, 1));
    $status = $object['status_fb'];
    $status_time = $object['status_time'];
  }
  else if ($status && !$status_time) {
    $status_time = db_result(db_query_range("SELECT status_time FROM {facebook_status} WHERE uid = %d AND status_fb = %s ORDER BY status_time DESC", $uid, $status, 0, 1));
  }
  else if ($status_time && !$status) {
    $status = db_result(db_query_range("SELECT status_fb FROM {facebook_status} WHERE uid = %d ORDER BY status_time DESC", $uid, 0, 1));
  }
  $status_time = format_interval($status_time);
  $target_users_roles = array(
    ACTIVITY_ALL => 'all',
    $uid => 'author'
  );
  $data = array(
    'operation' => 'update',
    'author-uid' => $uid,
    'author-name' => $uname,
    'author-name-link' => l($uname, 'user/'. $uid),
    'status' => $status,
    'status-created-time' => $status_time,
  );
  switch ($op) {
    case 'activity':
      activity_insert('facebook_status', 'status', 'update', $data, $target_users_roles);
      break;
    case 'token':
      return array(
        'uid' => $uid,
        'name' => $uname,
        'status' => $status,
        'time' => $status_time,
      );
      break;
  }
}

/**
 * Implementation of hook_activity_info().
 * Continued integration with activity.module.
 *
 * @return
 *   An array of information necessary to build the activity record.
 *
 * @see facebook_status_activity()
 */
function facebook_status_activity_info() {
  if (variable_get('facebook_status_mode', 1)) {
    $def_all = '[author-name-link] [status]';
    $def_auth = 'Your status is now "[status]"';
  }
  else {
    $def_all = "[author-name-link]'s status was [operation]d";
    $def_auth = "Your status was [operation]d";
  }
  return array(
    'ops' => array('update' => t('Update')),
    'types' => array('status' => 'status'),
    'roles' => array(
      'author' => array(
        '#name' => t('Author'),
        '#description' => t('The person who created the node.'),
        '#default' => $def_auth,
      ),
      // This is what corresponds to ACTIVITY_ALL
      'all' => array(
        '#name' => t('All'),
        '#description' => t('Everyone with permission'),
        '#default' => $def_all,
      ),
    ),
  );
}

/**
 * Implementation of hook_token_list().
 * Token module integration.  Required for Activity to work.
 */
function facebook_status_token_list($type = 'all') {
  if ($type == 'facebook_status') {
    $tokens['facebook_status'] = array(
      'operation' => t('The verb of the operation that took place.  Always "update."'),
      'author-uid' => t('The UID of the person whose status was updated.'),
      'author-name' => t('The username of the person whose status was updated.'),
      'author-name-link' => t('A link to the profile of the user whose status was updated.'),
      'status' => t('The new status'),
      'status-created-time' => t('The time the status was updated'),
    );

    return $tokens;
  }
}

/**
 * Implementation of hook_token_values().
 * Token module integration.  Required for Activity to work.
 */
function facebook_status_token_values($type, $data = NULL) {
  //honestly I have no idea what this does, and it returns some default site tokens that aren't really necessary, but nothing works without including it.
  static $authors;
  if ($type == 'facebook_status' && !empty($data)) {
    if (!isset($authors[$data['author-uid']])) {
    $author = db_fetch_object(db_query('SELECT uid, name FROM {users} WHERE uid = %d', $data['author-uid']));
      $authors[$data['author-uid']] = theme('username', $author);
    }
    $data['author'] = $authors[$data['author-uid']];
    return $data;
  }

  //Not sure the rest of this is necessary, but everything seems to work so I'm not going to mess with it.
  //If it's not necessary there's some code that can be removed from facebook_status_activity() related to the $op parameter.
  $object = facebook_status_activity('token');
  $values = array(
    'operation' => 'update',
    'author-uid' => $object['uid'],
    'author-name' => $object['name'],
    'author-name-link' => l($object['name'], 'user/'. $object['uid']),
    'status' => $object['status'],
    'status-created-time' => $object['time'],
  );
  return $values;
}