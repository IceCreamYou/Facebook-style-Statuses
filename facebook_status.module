<?php
// $Id$

/**
 * @file
 *   Allows users to have a "status."
 */

//=============
//DRUPAL HOOKS.
//=============

/**
 * Implementation of hook_help().
 */
function facebook_status_help($path, $arg) {
  if ($path == 'admin/help#facebook_status') {
    return t('Allows users the ability to have a Facebook-style "status." Please see the <a href="http://drupal.org/project/facebook_status" rel="nofollow">Project page</a> for more information.');
  }
}

/**
 * Implementation of hook_menu().
 */
function facebook_status_menu() {
  $items = array();
  $items['admin/settings/facebook_status'] = array(
    'title' => 'Facebook-style Statuses settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('facebook_status_admin'),
    'access arguments' => array('access administration pages'),
    'description' => 'Allows administrators to adjust certain display settings for Facebook Status.',
    'file' => 'facebook_status.admin.inc',
  );
  $items['facebook_status/autocomplete'] = array(
    'title' => 'Facebook-style Statuses user autocomplete',
    'page callback' => '_facebook_status_user_autocomplete',
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
  );
  $items['facebook_status/js/%user'] = array(
    'title' => 'Save status update form',
    'page callback' => 'facebook_status_save_js',
    'page arguments' => array(2),
    'access callback' => '_facebook_status_can_edit',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_block().
 */
function facebook_status_block($op = 'list', $delta = 0, $edit = NULL) {
  if ($op == 'list') {
    $block['facebook_status']['info'] = t('Facebook-style Statuses');
    $block['facebook_status_single']['info'] = t('Facebook-style Statuses Individual User');
    return $block;
  }
  else if ($op == 'view' && $delta == 'facebook_status') {
    $account = facebook_status_choose_owner(FALSE);
    $block['subject'] = t('Status');
    $block['content'] = theme('facebook_status_form_display', $account);
    return $block;
  }
  else if ($op == 'view' && $delta == 'facebook_status_single') {
    $account = user_load(array('name' => variable_get('facebook_status_special_user', '')));
    $block['subject'] = t('Status');
    $block['content'] = theme('facebook_status_form_display', $account);
    return $block;
  }
  else if ($op == 'configure' && $delta == 'facebook_status_single') {
    $form['facebook_status'] = array(
      '#type' => 'fieldset',
      '#title' => t('Facebook Status Settings'),
      '#collapsible' => TRUE,
      '#weight' => -4,
      '#tree' => TRUE,
    );
    $form['facebook_status']['facebook_status_special_user'] = array(
      '#type' => 'textfield',
      '#title' => t('Special User'),
      '#default_value' => variable_get('facebook_status_special_user', ''),
      '#description' => t("This block will work exactly like the Facebook Status block, except that it only shows one user's status.  That user is determined by the UID you enter in this field."),
      '#element_validate' => array('facebook_status_alter_validate'),
      '#required' => TRUE,
      '#autocomplete_path' => 'user/autocomplete',
    );
    return $form;
  }
  else if ($op == 'save' && $delta == 'facebook_status_single') {
    variable_set('facebook_status_special_user', $edit['facebook_status']['facebook_status_special_user']);
  }
}

/**
 * Validate function for the Special User element in the form alter configuration.
 */
function facebook_status_alter_validate($element, &$form_state) {
  $name = $form_state['values']['facebook_status']['facebook_status_special_user'];
  $uid = db_result(db_query("SELECT uid FROM {users} WHERE name = '%s'", $name));
  if (!$uid) {
    form_set_error('facebook_status', t('You must use a valid username in the Special User field.'));
  }
}

/**
 * Implementation of hook_perm().
 */
function facebook_status_perm() {
  return array('edit all statuses', 'edit own status', 'view all statuses');
}

/**
 * Implementation of hook_user().
 */
function facebook_status_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'delete') {
    //Remove abandoned statuses from the database on user account deletion.
    db_query('DELETE FROM {facebook_status} WHERE uid = %d', $account->uid);
  }
  if ($op == 'view' && !_facebook_status_exclude($account)) {
    if (!isset($account->content['facebook_status'])) {
      $account->content['facebook_status'] = array();
    }
    $account->content['facebook_status'] += array(
      '#type' => 'user_profile_category',
      '#attributes' => array('class' => 'facebook_status-profile-category'),
      '#weight' => -5,
      '#title' => t('Status'),
    );
    //Hidden setting. Not available on the settings page.
    $size = variable_get('facebook_status_size_long', 72);
    $account->content['facebook_status']['status'] = array(
      '#type' => 'user_profile_item',
      '#title' => '',
      '#value' => theme('facebook_status_form_display', $account, $size),
      '#attributes' => array('class' => 'facebook_status profile'),
    );
  }
}

/**
 * Implementation of hook_theme().
 */
function facebook_status_theme($existing, $type, $theme, $path) {
  return array(
    'facebook_status_item' => array(
      'arguments' => array(
        'account' => NULL,
        'status' => '',
        'linked' => TRUE,
      ),
    ),
    'facebook_status_form_display' => array(
      'arguments' => array(
        'account' => FALSE,
      ),
    ),
    'facebook_status_time' => array(
      'arguments' => array(
        'status_time' => time(),
      ),
    ),
  );
}

//================
//THEME FUNCTIONS.
//================

/**
 * Formats a status. Does not check to make sure the status belongs to the
 * relevant user if a status is passed in.
 *
 * @param $account
 *   The $user object of the user who owns the status.
 * @param $status
 *   Usually the relevant status text. Can also be an object with properties
 *   status and status_time. If not passed, gets the last status for the
 *   relevant user. If there is none, uses a default message. It's usually
 *   better not to pass this parameter or to pass an empty string since blank
 *   statuses are automatically taken care of that way.
 * @param $linked
 *   If TRUE, themes the username; this usually makes it a link.
 *   If FALSE, uses the unthemed (and thus unlinked) username so that the result
 *   can be placed within linked text.
 * @return
 *   HTML to display the themed status or FALSE if the current user does not
 *   have permission to view the status.
 */
function theme_facebook_status_item($account, $status = '', $linked = TRUE) {
  global $user;
  if (!user_access('view all statuses', $user) && $user->uid != $account->uid) {
    return FALSE;
  }
  $name = theme('username', $account);
  if (!$linked) {
    $name = check_plain($account->name);
  }
  $status_orig = facebook_status_get_status($account->uid, 1, -1, FALSE);
  $status_time = $status_orig[0]->status_time;
  if (!$status) {
    $status = $status_orig[0]->status;
    if (!$status) {
      if (variable_get('facebook_status_concat', 1) == 0) {
        $status = t('!user does not have a status.', array('!user' => $name));
      }
      else {
        $status = t('does not have a status.');
      }
    }
  }
  if (is_object($status)) {
    $status_time = $status->status_time;
    $status = $status->status;
  }
  $time = theme('facebook_status_time', $status_time);
  if (variable_get('facebook_status_concat', 1)) {
    if (_facebook_status_possessive($status)) {
      return t('!user@status %time', array('!user' => $name, '@status' => $status, '%time' => $time));
    }
    else {
      return t('!user @status %time', array('!user' => $name, '@status' => $status, '%time' => $time));
    }
  }
  else {
    return t('@fbsstatus %time', array('!user' => $name, '@fbsstatus' => $status, '%time' => $time));
  }
}

/**
 * Returns the status update form.
 *
 * @param $account
 *   The user whose status form should be displayed, or FALSE to have the module
 *   detect the relevant user automatically according to the settings.
 * @param $size
 *   The size of the status update textfield, or FALSE to use the setting.
 * @return
 *   HTML to display the status update form or FALSE if the user cannot have a
 *   status.
 */
function theme_facebook_status_form_display($account = FALSE, $size = FALSE) {
  if ($account === FALSE) {
    $account = facebook_status_choose_owner(FALSE);
  }
  $excluded = _facebook_status_exclude($account);
  if ($excluded) {
    return FALSE;
  }
  $can_edit = _facebook_status_can_edit($account);
  if ($can_edit) {
    return '<div id="facebook_status_update" class="clear-block">'. drupal_get_form('_facebook_status_status', $account, $size) .'</div>';
  }
  else {
    return theme('facebook_status_item', $account);
  }
}

/**
 * Returns a formatted string showing the time the status was submitted.
 *
 * @param $status_time
 *   The Unix timestamp for when the relevant status was updated.
 * @return
 *   If the status was submitted within the last 3 days, returns a "time ago"
 *   date. If not, returns a normal (small) date. If zero, returns FALSE.
 */
function theme_facebook_status_time($status_time) {
  if (!$status_time) {
    return FALSE;
  }
  if (time() - $status_time < 60) {
    return t('a moment ago');
  }
  else if (time() - $status_time < 60 * 60 * 24 * 3) {
    //!time and not @time because this is usually run through check_plain() later as part of theme_placeholder().
    //It doesn't really matter though since the text is created by format_interval() and thus should already be safe.
    return t('!time ago', array('!time' => format_interval(time() - $status_time, 1)));
  }
  else {
    return format_date($status_time, 'small');
  }
}

//====
//API.
//====

/**
 * Returns a status or statuses for a single user.
 *
 * @param $uid
 *   The User ID of the user whose status will be returned.
 *   If $uid evaluates to FALSE, the current user is assumed.
 * @param $count
 *   The maximum number of statuses to return.
 *   If zero, all relevant statuses are returned ($instance still matters).
 * @param $instance
 *   Allows getting statuses that are older than the most recent status.
 *   If positive, gets statuses after the timestamp $instance.
 *   If negative, gets the $instance-th most recent status (and newer ones).
 *   If negative and there are fewer than abs($instance) statuses available,
 *   the counting starts with the first one.
 *   If zero, gets $count statuses starting with the first one.
 * @param $exclude_blank
 *   If TRUE, blank statuses will not be included.  If FALSE, they will be.
 * @return
 *   An array of status objects.
 *   If the user has no statuses, or may not have statuses, returns FALSE.
 */
function facebook_status_get_status($uid = 0, $count = 1, $instance = -1, $exclude_blank = TRUE) {
  $excluded = _facebook_status_exclude(user_load(array('uid' => $uid)));
  if ($excluded) {
    return FALSE;
  }
  if (!$uid) {
    global $user;
    $uid = $user->uid;
  }
  //Greater than or equal to zero.  This means $instance = 0 can retrieve all statuses starting with the first one.
  //Note that the above is true even though we exclude statuses where status_time == 0 because only blank statuses have status_time == 0.
  if ($instance >= 0) {
    if ($count == 0) {
      if ($exclude_blank) {
        $result = db_query("SELECT sid FROM {facebook_status} WHERE uid = %d AND status_time > %d AND status_time <> 0 ORDER BY sid DESC", $uid, $instance);
      }
      else {
        $result = db_query("SELECT sid FROM {facebook_status} WHERE uid = %d AND status_time > %d ORDER BY sid DESC", $uid, $instance);
      }
    }
    else {
      if ($exclude_blank) {
        $result = db_query_range("SELECT sid FROM {facebook_status} WHERE uid = %d AND status_time > %d AND status_time <> 0 ORDER BY sid DESC", $uid, $instance, 0, $count);
      }
      else {
        $result = db_query_range("SELECT sid FROM {facebook_status} WHERE uid = %d AND status_time > %d ORDER BY sid DESC", $uid, $instance, 0, $count);
      }
    }
  }
  else {
    $total = facebook_status_has_status($uid);
    //If $count == 0 we want to get all relevant statuses, so set $count to the total number of statuses for this user so they all get included.
    if ($count == 0) {
      $count = $total;
    }
    //Offset actually starts at zero in SQL, but $instance starts at (negative) 1.
    $offset = abs($instance) - 1;
    //If there are fewer than abs($instance) statuses available, just start with the first one.
    if ($total + $instance < 0) {
      $offset = 0;
    }
    if ($exclude_blank) {
      $result = db_query_range("SELECT sid FROM {facebook_status} WHERE uid = %d AND status_time <> 0 ORDER BY sid DESC", $uid, $offset, $count);
    }
    else {
      $result = db_query_range("SELECT sid FROM {facebook_status} WHERE uid = %d ORDER BY sid DESC", $uid, $offset, $count);
    }
  }
  $statuses = array();
  while ($sid = db_fetch_array($result)) {
    $status = facebook_status_load($sid);
    if (trim($status->status)) {
      $statuses[] = $status;
    }
  }
  if (!empty($statuses)) {
    return $statuses;
  }
  return FALSE;
}

/**
 * Returns statuses for multiple users.
 * Assumes blank statuses shouldn't be returned.
 *
 * @param $uids
 *   An array of User IDs for users whose statuses will be returned. If empty,
 *   all users' statuses will be considered.
 * @param $total
 *   The maximum number of statuses to return.
 *   If zero, all relevant statuses are returned (but $count still matters).
 * @param $count
 *   The maximum number of statuses to include for each user.
 *   If zero, all relevant statuses are returned for each user.
 * @return
 *   An array of status objects.
 */
function facebook_status_get_statuses($uids = array(), $total = 0, $count = 1) {
  $statuses = array();
  if (empty($uids)) {
    //Handle separately for speed.
    if ($count == 1) {
      if ($total == 0) {
        $result = db_query("SELECT sid, uid FROM (SELECT sid, uid FROM {facebook_status} WHERE status_time <> 0 ORDER BY sid DESC) x GROUP BY uid ORDER BY sid DESC");
      }
      else {
        $result = db_query_range("SELECT sid, uid FROM (SELECT sid, uid FROM {facebook_status} WHERE status_time <> 0 ORDER BY sid DESC) x GROUP BY uid ORDER BY sid DESC", 0, $total);
      }
    }
    else if ($count == 0) {
      if ($total == 0) {
        $result = db_query("SELECT sid, uid FROM {facebook_status} WHERE status_time <> 0 ORDER BY sid DESC");
      }
      else {
        $result = db_query_range("SELECT sid, uid FROM {facebook_status} WHERE status_time <> 0 ORDER BY sid DESC", 0, $total);
      }
    }
    else {
      //Get all users who may possibly have posted the relevant statuses and pass them back in. The results will be limited later.
      $result = db_query_range("SELECT uid FROM (SELECT uid FROM {facebook_status} WHERE status_time <> 0 ORDER BY sid DESC) x GROUP BY uid ORDER BY sid DESC", 0, $total);
      $uids = array();
      while ($uid = db_fetch_array($result)) {
        if ($uid['uid']) {
          $uids[] = $uid['uid'];
        }
      }
      facebook_status_get_statuses($uids, $total, $count);
      return;
    }
    while ($sid = db_fetch_array($result)) {
      if ($sid['sid'] && !_facebook_status_exclude(user_load(array('uid' => $sid['uid'])))) {
        $status = facebook_status_load($sid['sid']);
        $statuses[$status->sid] = $status;
      }
    }
    krsort($statuses);
  }
  else {
    foreach ($uids as $uid) {
      $status_orig = facebook_status_get_status($uid, $count);
      $status = $status_orig[0];
      if ($status && trim($status->status)) {
        $statuses[$status->sid] = $status;
      }
    }
    krsort($statuses);
    if (!empty($statuses) && $total != 0) {
      $statuses = array_slice($statuses, 0, $total);
    }
  }
  //array_values() indexes numerically.
  return array_values($statuses);
}

/**
 * Determines whether a user has statuses.
 *
 * @param $uid
 *   The User ID of the user whose number of statuses will be looked up.
 *   If $uid evaluates to FALSE, the current user will be assumed.
 * @return
 *   The number of statuses of the relevant user.
 */
function facebook_status_has_status($uid = FALSE) {
  if (!$uid) {
    global $user;
    $uid = $user->uid;
  }
  return db_result(db_query("SELECT COUNT(sid) FROM {facebook_status} WHERE uid = %d", $uid));
}

/**
 * Load a status object.
 *
 * @param $sid
 *   The Status ID.
 * @return
 *   A full status object containing sid, status, status_time, and uid.
 */
function facebook_status_load($sid) {
  return db_fetch_object(db_query("SELECT * FROM {facebook_status} WHERE sid = %d", $sid));
}

/**
 * Determines the user whose status should be shown.
 *
 * @param $legacy
 *   An array specifying which realms to treat with legacy behavior.  If
 *   $legacy['user'] == TRUE, then on profile pages the owner of the profile
 *   will be returned.  If $legacy['node'] == TRUE, then on nodes the author of
 *   the node will be returned.  Everywhere else, or if $legacy has no value in
 *   the 'user' or 'node' keys, the current user will be returned. If $legacy is
 *   FALSE, the module's settings will be applied.
 * @return
 *   The $user object for the user whose status should be shown.
 */
function facebook_status_choose_owner($legacy = array()) {
  if ($legacy === FALSE) {
    $legacy = variable_get('facebook_status_legacy', array('user' => 'user'));
  }
  if ($legacy['user'] && arg(0) == 'user' && is_numeric(arg(1))) {
    return user_load(array('uid' => arg(1)));
  }
  else if ($legacy['node'] && arg(0) == 'node' && is_numeric(arg(1))) {
    $node = menu_get_object();
    return user_load(array('uid' => $node->uid));
  }
  else {
    global $user;
    return $user;
  }
}

//=================
//HELPER FUNCTIONS.
//=================

/**
 * Determines if the current user can edit the relevant status.
 *
 * @param $author
 *   The $user object for the author of the status.  If FALSE, determine
 *   the author automatically.
 * @return
 *   TRUE if the current user can edit the status; FALSE otherwise.
 */
function _facebook_status_can_edit($author = FALSE) {
  global $user;
  if (!$author) {
    $author = facebook_status_choose_owner(FALSE);
  }
  if (($user->uid == $author->uid && user_access('edit own status')) || user_access('edit all statuses')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Determines whether the relevant user can have a status.
 *
 * @param $account
 *   The $user object of the user to examine. If FALSE, the current user is
 *   assumed.
 * @return
 *   FALSE if the user is allowed to have a status; TRUE otherwise.
 */
function _facebook_status_exclude($account) {
  if (!$account) {
    global $user;
    $account = $user;
  }
  //This variable should get saved so that this splits it exactly into the names without needing to trim().
  $names = explode(', ', variable_get('facebook_status_exclude', ''));
  if (in_array($account->name, $names)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Determines if a status starts with the English possessive apostrophe-S.
 *
 * @param $status
 *   The relevant status text.
 * @return
 *   TRUE if the status is possessive; FALSE otherwise.
 */
function _facebook_status_possessive($status) {
  //Don't use this function with Facebook Mode because there's nothing to concatenate with.
  if (!variable_get('facebook_status_concat', 1)) {
    return FALSE;
  }
  $language = user_preferred_language($account);
  $language = $language->language;
  $string = drupal_substr($status, 0, 3);
  if ($language == 'en' && $string == "'s ") {
    return TRUE;
  }
  return FALSE;
}

/**
 * Autocompletes multiple-username textfields.
 * Some awkwardness exists if a user has quotes or commas in their username.
 * Adapted from taxonomy.module.
 *
 * @param $string
 *   The list of names.
 */
function _facebook_status_user_autocomplete($string = '') {
  $array = drupal_explode_tags($string);
  //The user enters a comma-separated list of names. We only autocomplete the last name.
  $search = trim(array_pop($array));
  $matches = array();
  if ($search != '') {
    $result = db_query_range("SELECT DISTINCT(name) FROM {users}
      WHERE status <> 0 AND uid <> 0 AND LOWER(name) LIKE LOWER('%s%%')
      ORDER BY name ASC", $search, 0, 10);
    $prefix = count($array) ? implode(', ', $array) .', ' : '';
    while ($user = db_fetch_object($result)) {
      $name = $user->name;
      //Commas and quotes in terms are special cases, so encode them.
      //Use strpos() to check if they exist first since str_replace() is costly.
      if (strpos($user->name, ',') !== FALSE || strpos($user->name, '"') !== FALSE) {
        $name = '"'. str_replace('"', '""', $user->name) .'"';
      }
      $matches[$prefix . $name] = check_plain($user->name);
    }
  }
  drupal_json($matches);
}

//======
//FORMS.
//======

/**
 * The status form.
 *
 * @param $account
 *   The $user object for the user whose status will be shown.
 * @param $size
 *   The size of the status update textfield, or FALSE to use the setting.
 * @return
 *   A $form object.
 */
function _facebook_status_status(&$form_state, $account, $size = FALSE) {
  if (!$size) {
    $size = variable_get('facebook_status_size', 32);
  }
  //Hidden option.  Not on the settings page.
  $maxlength = variable_get('facebook_status_length', 192);
  //Because this text will appear exactly as-is in the textfield, we can't use a full check_plain() or filter_xss().
  //We also translate a blank string so that the default text can be in different languages without having the restriction of being preset.
  $default = str_replace('"', '', t('@fbssdefault', array('@fbssdefault' => '')));

  if (variable_get('facebook_status_concat', 1)) {
    $prefix = '<span style="float: left;">'. t('!fbss_prefix_name ', array('!fbss_prefix_name' => theme('username', $account))) .'&nbsp;</span>';
  }
  else {
    $prefix = '';
  }
  $status = facebook_status_get_status($account->uid, 1, -1, FALSE);
  $status = $status[0];
  if ($status->status_time) {
    $default = $status->status;
  }
  $description = '';

  $path = drupal_get_path('module', 'facebook_status');
  $slider = '';
  if (variable_get('facebook_status_slide', 1)) {
    if (!$form_state['#js_exists']) {
      drupal_add_js($path .'/facebook_status.js');
    }
    $slider = '<a href="#status" name="status" class="facebook_status_slide">'. theme('facebook_status_item', $account, '', FALSE) .'</a>';
  }
  else {
    $description = theme('facebook_status_time', $status->status_time);
  }
  if (!$form_state['#js_exists']) {
    drupal_add_css($path .'/facebook_status.css');
  }
  $form['status'] = array(
    '#type' => 'textfield',
    '#description' => $description,
    '#field_prefix' => $prefix,
    '#size' => $size,
    '#maxlength' => $maxlength,
    '#default_value' => $default,
    '#prefix' => $slider .'<span class="facebook_status_hide">',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#suffix' => '</span>',
    '#submit' => array('_facebook_status_status_submit'),
  );
  $form['submit']['#ahah'] = array(
    'path' => 'facebook_status/js/'. $account->uid .'/'. $size,
    'wrapper' => 'facebook_status_update',
    'effect' => 'fade',
    'method' => 'replace',
  );
  $form_state['#account'] = $account;
  $_SESSION['#fbss-uid'] = $account->uid;
  return $form;
}

/**
 * Submit function for the status update form.
 */
function _facebook_status_status_submit($form, &$form_state) {
  $account = $form_state['#account'];
  if (!$account->uid) {
    $account = user_load(array('uid' => $_SESSION['#fbss-uid']));
  }
  global $user;
  $new_status = trim($form_state['values']['status']);
  //If the user clears the status, set the time to zero so the new, blank status will not show up as new in lists.
  $time = time();
  if ($new_status === '') {
    $time = 0;
  }
  //Choose "your" or "user's" depending on whether the editing user is the owner of the status.
  $your = t('Your');
  if ($user->uid != $account->uid) {
    $your = t("!user's", array('!user' => theme('username', $account)));
  }
  //Pretend to have set a new status if the submitted status is exactly the same as the old one.
  $status = facebook_status_get_status($account->uid);
  if ($new_status != $status[0]->status && $account->uid) {
    //If a new status is submitted within 12 seconds of the old one, we assume the user didn't mean to post the first one, and write over it.
    if (time() - $status[0]->status_time < 12) {
      db_query_range("UPDATE {facebook_status} SET status = '%s', status_time = %d WHERE uid = %d ORDER BY sid DESC", $new_status, $time, $account->uid, 0, 1);
    }
    else {
      db_query("INSERT INTO {facebook_status} (status, status_time, uid) VALUES('%s', %d, %d)", $new_status, $time, $account->uid);
    }
    //Invokes hook_facebook_status_update($status_owner_object, &$status).
    module_invoke_all('facebook_status_update', $account, $new_status);
  }
  //Trigger integration.
  if (module_exists('trigger')) {
    module_invoke_all('facebook_status', 'submitted', $user);
  }
  //Activity integration.
  facebook_status_activity($account, $new_status);
  drupal_set_message(t('!possessive status has been updated.', array('!possessive' => $your)));
}

/**
 * Saves statuses via AHAH.
 */
function facebook_status_save_js() {
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form = form_get_cache($_POST['form_build_id'], $form_state);
  $form_state['values'] = $_POST;
  $form['#post'] = $_POST;
  $account = user_load(array('uid' => arg(2)));
  $form_state['#js_exists'] = TRUE;
  $size = arg(3);
  if (!is_numeric($size) || round($size) != $size || $size < 1) {
    $size = variable_get('facebook_status_size', 32);
  }

  //Save the status.
  global $user;
  $new_status = trim($form_state['values']['status']);
  //If the user clears the status, set the time to zero so the new, blank status will not show up as new in lists.
  $time = time();
  if ($new_status === '') {
    $time = 0;
  }
  //Pretend to have set a new status if the submitted status is exactly the same as the old one.
  $status = facebook_status_get_status($account->uid);
  if ($new_status != $status[0]->status) {
    //If a new status is submitted within 12 seconds of the old one, we assume the user didn't mean to post the first one, and write over it.
    if (time() - $status[0]->status_time < 12) {
      db_query("UPDATE {facebook_status} SET status = '%s', status_time = %d WHERE uid = %d ORDER BY sid DESC LIMIT 1", $new_status, $time, $account->uid);
    }
    else {
      db_query("INSERT INTO {facebook_status} (status, status_time, uid) VALUES('%s', %d, %d)", $new_status, $time, $account->uid);
    }
    //Invokes hook_facebook_status_update($status_owner_object, &$status).
    module_invoke_all('facebook_status_update', $account, $new_status);
  }
  //Trigger integration.
  if (module_exists('trigger')) {
    module_invoke_all('facebook_status', 'submitted', $user);
  }
  //Activity integration.
  facebook_status_activity($account, $new_status);

  //Cache the form so it can be manipulated later if necessary.
  form_set_cache($_POST['form_build_id'], $form, $form_state);

  //Get HTML for the replacement form.
  $form = drupal_rebuild_form('_facebook_status_status', $form_state, array('_facebook_status_status', $account, $size));
  $output = theme('status_messages') . drupal_render_form('_facebook_status_status', $form);

  drupal_json(array('status' => TRUE, 'data' => $output));
}

//====================
//TRIGGER INTEGRATION.
//====================

/**
 * Note that Actions integration is not present, even though Triggers
 * integration is. That's because there's really no easily conceivable action
 * that Facebook-style Statuses should define except to display a message to the
 * user. However, that action is already available, just through the UI for all
 * hooks. Use the triggerunlock module, which lets you use any action with any
 * hook, to access the display message action with facebook_status triggers.
 * Of course, you can also write your own.
 */

/**
 * Implementation of hook_hook_info().
 */
function facebook_status_hook_info() {
  return array(
    'Facebook-style Statuses' => array(
      'facebook_status' => array(
        'submitted' => array(
          'runs when' => t('The status update form has been submitted.'),
        ),
      ),
    ),
  );
}

/**
 * Implementation of hook_facebook_status().
 */
function facebook_status_facebook_status($op, $user) {
  if (!in_array($op, array('submitted'))) {
    return;
  }
  $aids = _trigger_get_hook_aids('facebook_status', $op);
  $context = array(
    'hook' => 'facebook_status',
    'op' => $op,
    'user' => $user,
  );
  actions_do(array_keys($aids), $user, $context);
}

//===============================
//ACTIVITY AND TOKEN INTEGRATION.
//===============================

/**
 * Implementation of hook_activity_info().
 */
function facebook_status_activity_info() {
  $token_types['facebook_status'] = t('Facebook-style Statuses');
  //Note that we do not define the role of the user who updated the status. That's because it would usually make for very confused messages.
  return array(
    'ops' => array('update' => t('Submit Status Update')),
    'types' => $token_types,
    'roles' => array(
      'owner' => array(
        '#name' => t('Owner'),
        '#description' => t('The user who owns the status.'),
        '#default' => 'You have an [operation]d status.',
      ),
      'all' => array(
        '#name' => t('All'),
        '#description' => t('Everyone who can see status updates.'),
        '#default' => '[owner] has an [operation]d status.',
      ),
    ),
  );
}

/** 
 * Implementation of hook_activityapi().
 * I have no idea why this is actually necessary.
 */
function facebook_status_activityapi(&$activity, $op) {
  if ($op == 'load') {
    if ($activity['data']['module'] == 'facebook_status' && user_access('view all statuses')) {
      $activity = array();
    }
  }
}

/**
 * Implementation of hook_token_list().
 */
function facebook_status_token_list($type = 'all') {
  if ($type == 'facebook_status') {
    $tokens['facebook_status'] = array(
      'operation' => t('The operation that took place. Always "update."'),
      'owner' => t('The owner of the updated status.'),
      'status' => t('The new status.'),
      'status-time' => t('The time the status was submittted.'),
    );
    return $tokens;
  }
}

/**
 * Implementation of hook_token_values().
 */
function facebook_status_token_values($type, $data = NULL, $options = array()) {
  if ($type == 'facebook_status' && !empty($data)) {
    $status_time = $data['status_time'];
    $data['status-time'] = theme('facebook_status_time', $status_time);
    return $data;
  }
}

/**
 * Handles recording activity messages.
 *
 * @param $account
 *   The $user object of the owner of the status.
 * @param $status
 *   The status object containing the status to record. Requires at least the
 *   status and status_time.
 */
function facebook_status_activity($account, $status) {
  if (!module_exists('activity')) {
    return FALSE;
  }
  //Privacy setting check.
  if (activity_user_privacy_optout($account)) {
    return FALSE;
  }
  $data = array(
    'operation' => 'update',
    'owner' => theme('username', $account),
    'status' => check_plain($status->status),
    'status_time' => $status->status_time,
  );
  $target_users_roles = array(
    ACTIVITY_ALL => 'all',
    $account->uid => 'owner'
  );
  activity_insert($account->uid, 'facebook_status', 'status', 'update', $data, $target_users_roles);
}

//==================
//VIEWS INTEGRATION.
//==================

/**
 * Implementation of hook_views_api().
 */
function facebook_status_views_api() {
  return array('api' => 2);
}